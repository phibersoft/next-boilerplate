!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=30)}([function(e,t){e.exports=require("express")},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends Error{constructor(e,t,r,n){super(e),this.hint=r,this.original=n,this.code=t}static converter(e){var t=e.message;if(e.code)e.code,t=e.message;else switch(e.message){case"invalid signature":t="İmza geçersiz. Oturumu yenile.";break;default:t=e.message}return{message:t,hint:t}}}t.default=n},function(e,t){e.exports=require("express-async-wrapper")},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.querier=t.catcher=void 0;const o=r(34);var i=r(17)("production");Object.keys(i).forEach(e=>{process.env[e]=i[e]});const s=new o.Pool({database:process.env.DB_DATABASE,user:process.env.DB_USER,password:process.env.DB_PASSWORD,host:process.env.DB_HOST}),a=e=>{var t;switch(e.code){case"42601":t="Syntax hatası. Sunucuda problem var.";break;case"23505":t="Eklemeye çalıştığın veriden bir tane daha var. Detaylar : "+e.detail;break;case"22001":t="Eklemeye çalıştığın veri çok uzun.";break;default:t=e.message||e.detail||e.where}return{success:!1,message:t,original:e.message||e.detail,error:e}};t.catcher=a;t.querier=(e,t)=>n(void 0,void 0,void 0,(function*(){try{console.log(e);return{success:!0,data:yield s.query(e,t)}}catch(r){return console.log("Querier Error",r.message),a(Object.assign(Object.assign({},r),{query:e,args:t}))}})),t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PaginationHandler=t.DatabaseBodyHandler=void 0,t.DatabaseBodyHandler=e=>Object.keys(e).map((e,t)=>`"${e}" = $${t+1}`).join(" , "),t.PaginationHandler=(e,t)=>({limit:e.limit||2e3,offset:e.offset||0,order:e.order||t,type:e.type||"DESC"})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=(e,t)=>{var r=Object.keys(t);e.forEach(e=>{if(!r.includes(e))throw new Error(e+" nesnesi olmadan bu işlem yapılamaz");if(""==t[e])throw new Error(e+" nesnesi boş kalamaz.")})}},function(e,t){e.exports=require("axios")},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.addProduct=t.editOrder=t.addOrder=t.prepareDollarSigns=void 0;const o=r(3);t.prepareDollarSigns=e=>{for(var t=[],r=1;r<e+1;r++)t.push("$"+r);return t.join(",")},t.addOrder=e=>n(void 0,void 0,void 0,(function*(){var r=new Date;const n=[e.price||0,e.seller,e.time||r.getTime(),e.buyername,e.buyerphone,e.buyeradres,e.buyeril,e.buyerilce,JSON.stringify(e.basket),e.uniq||r.getTime(),e.buyerinstagram||"Instagram Yok.",e.website||"https://gumusistan.com",e.payment||"KREDI KARTI",e.note||"Not Yok.",e.ideasoft_id||null,e.magaza||"gmst"];return yield o.querier(`SELECT add_order(${t.prepareDollarSigns(16)})`,n)})),t.editOrder=e=>n(void 0,void 0,void 0,(function*(){var r=new Date;r.setHours(r.getHours()+3);const n=[e.orderId,e.price,e.seller,e.buyername,e.buyerphone,e.buyeradres,e.buyeril,e.buyerilce,JSON.stringify(e.basket),e.uniq||r.getTime(),e.buyerinstagram,e.website||"https://gumusistan.com",e.payment||"KREDI KARTI",e.note||"Not Yok"];return yield o.querier(`SELECT edit_order(${t.prepareDollarSigns(14)})`,n)})),t.addProduct=e=>n(void 0,void 0,void 0,(function*(){const r=[e.name,e.image,e.typeDescription,e.ideasoft||null,e.stockcode||null,e.extra||null];return yield o.querier(`SELECT add_product(${t.prepareDollarSigns(6)})`,r)}))},function(e,t){e.exports=require("multer")},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.turkcell_controller_api_handler=t.turkcell_controller_json_to_form=t.turkcell_controller_api=t.turkcell_controller_token_api=void 0;const i=r(6),s=r(10),a=r(26),c=r(11),{E_TOKEN_URI:u,E_URI:d}=process.env,l=i.default.create({baseURL:u,headers:{"Content-Type":"application/x-www-form-urlencoded"}});t.turkcell_controller_token_api=l;const f=i.default.create({baseURL:d,headers:{"Content-Type":"application/json"}});t.turkcell_controller_api=f;t.turkcell_controller_json_to_form=e=>{var t=[];for(var r in e){const n=encodeURIComponent(r),o=encodeURIComponent(e[r]);t.push(n+"="+o)}return t.join("&")};t.turkcell_controller_api_handler=e=>{const t=s.magazaDestructor(e),r=a.token_checker(e,t);var n=f;return"test"==t&&(n=c.turkcell_test_api),n.defaults.headers.Authorization="Bearer "+r,n},o(r(26),t),o(r(11),t),o(r(89),t),o(r(90),t)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.strReplacer=t.magazaDestructor=t.Turkcell_DefaultUsers=void 0,t.Turkcell_DefaultUsers={isc:{username:process.env.E_ISC_USERNAME,password:process.env.E_ISC_PASSWORD,client_id:"serviceApi"},gmst:{username:process.env.E_GMST_USERNAME,password:process.env.E_GMST_PASSWORD,client_id:"serviceApi"},test:{username:process.env.E_TEST_USERNAME,password:process.env.E_TEST_PASSWORD,client_id:"serviceApi"}},t.magazaDestructor=e=>{const{query:{magaza:t}}=e;if(t){if("gmst"==t)return"gmst";if("test"==t)return"test"}return"isc"},t.strReplacer=e=>e.match(/([A-Z-a-z-ÇçiİıIşŞüÜöÖ ])/g).join("")},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.turkcell_test_body_handler=t.turkcell_test_api=t.turkcell_test_token_api=void 0;const n=r(6),o=n.default.create({baseURL:"https://coretest.isim360.com/v1/token",headers:{"Content-Type":"application/x-www-form-urlencoded"}});t.turkcell_test_token_api=o;const i=n.default.create({baseURL:"https://efaturaservicetest.isim360.com/",headers:{"Content-Type":"application/json"}});t.turkcell_test_api=i;t.turkcell_test_body_handler=e=>(delete e.generalInfoModel.prefix,e)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.prepareRedirectUri=t.prepareRedirectLoginUri=t.expressCookieOptions=t.setCookieOptions=t.jwtSignOptions=void 0,t.jwtSignOptions=()=>({expiresIn:"15d"}),t.setCookieOptions=()=>{const e=new Date;return e.setMonth(e.getMonth()+2),{expires:e}},t.expressCookieOptions=(e=6)=>{const t=new Date;return t.setHours(t.getHours()+e),{expires:t}},t.prepareRedirectLoginUri=(e,r,n)=>{var o=t.prepareRedirectUri(e);return o+="/login",r&&(o+="?error="+encodeURI(r)),n&&(o+=r?"&":"?",o+="ref="+encodeURI(n)),o},t.prepareRedirectUri=e=>"localhost"==e.hostname?"http://localhost:4000":"https://"+e.hostname},function(e,t){e.exports=require("uniqid")},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)},i=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.paramHandler=t.ideasoft_controller_loop=t.ideasoft_controller_api=void 0;const s=r(6).default.create({baseURL:"http://gumusistan.myideasoft.com/api",headers:{"Content-Type":"application/json"}});t.ideasoft_controller_api=s;t.ideasoft_controller_loop=(e,t)=>i(void 0,void 0,void 0,(function*(){for(var r=[],n=1;;n++){const o=Object.assign({page:n,limit:100},e.defaults.params),i=yield e.get(t,{params:o});if(0==i.data.length)break;r.push(...i.data)}return r}));t.paramHandler=e=>{const t={};return Object.entries(e).forEach(e=>{e[1]&&(t[e[0]]=e[1],"sinceId"==e[0]&&Number(e[1])<=0&&(t[e[0]]=1))}),t},o(r(79),t),o(r(80),t),o(r(81),t)},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)},i=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.atolye_controller_extract=void 0;const s=r(168);r(13);t.atolye_controller_extract=e=>i(void 0,void 0,void 0,(function*(){s.default.prototype.header=["ID","Resim","Açıklama","Renk","ID","Resim","Açıklama","Renk"];const t=new s.default;t.addWorksheet();try{yield t.atolyeExtract(e);var{wb:r}=t;return{success:!0,output:yield r.writeToBuffer()}}catch(e){return{success:!1,message:e.message}}})),o(r(170),t),o(r(171),t)},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=r(1),i=r(33),s=r(3),a=r(12),c=r(35);class u{static authControl(e,t){try{var r=t.headers,n=t.cookies;const s=()=>{if(Object.keys(r).includes("phiber")){if(r.phiber==process.env.PHIBER_TOKEN)return{success:!0};throw new o.default("Güvenlik kontrolünden geçemedin. Lütfen öncelikle chrome kullanmayı dene.")}throw new o.default("Güvenlik kontrolünden geçemedin. Herhangi bir anahtar gönderilmemiş.")},a=()=>{const e=n.phiber;if(!e)return{success:!1,message:"Çerezler boş. Bu durum sık yaşanıyorsa lütfen CHROME kullan."};try{return{success:!0,data:i.verify(e,process.env.PHIBER_SECRET,{})}}catch(e){var t=o.default.converter(e);return{success:!1,message:t.message,hint:t.hint||null}}};switch(e){case"basic":return s();case"cooker":return a();case"super":const e=s();if(!e.success)return e;if(!Object.keys(n).includes("phiber")&&!Object.keys(r).includes("phibercookie"))throw new o.default("Çerezler boş. Tekrar giriş gerekli. Eğer bu durum sık yaşanıyorsa Chrome kullanmayı dene!");try{return{success:!0,data:i.verify(n.phiber||r.phibercookie,process.env.PHIBER_SECRET,{})}}catch(e){throw new o.default("Giriş sağlanamadı. Çerezlerdeki veri doğru değil.",e.message)}}}catch(e){var s=o.default.converter(e);return{success:!1,message:s.message,hint:s.hint}}}static basic(e,t,r){return n(this,void 0,void 0,(function*(){try{const r=u.authControl("basic",e);return r.success?(t.locals={success:!0,data:r.data},t.json({success:!0})):t.json({success:!1,message:r.message,hint:r.hint})}catch(e){return t.json({success:!1,message:e.message,hint:e.hint})}}))}static super(e,t,r){return n(this,void 0,void 0,(function*(){try{const r=u.authControl("super",e);return r.success?t.json({success:!0,data:r.data}):t.json({success:!1,message:r.message,hint:r.hint})}catch(e){return t.json({success:!1,message:e.message,hint:e.hint})}}))}static cooker(e,t){return n(this,void 0,void 0,(function*(){try{const r=u.authControl("cooker",e);return r.success?(t.locals={success:!0,data:r.data},t.json({success:!0})):t.json({success:!1,message:r.message,hint:r.hint})}catch(e){return t.json({success:!1,message:e.message,hint:e.hint})}}))}static basicMiddleware(e,t,r){return n(this,void 0,void 0,(function*(){try{const n=u.authControl("basic",e);if(!n.success)return t.json({success:!1,message:n.message,hint:n.hint});r()}catch(e){return t.json({success:!1,message:e.message,hint:e.hint})}}))}static loginRedirector(e,t,r){return n(this,void 0,void 0,(function*(){try{const n=u.authControl("cooker",e);return n.success?r():t.redirect(a.prepareRedirectLoginUri(e,n.message,e.originalUrl))}catch(r){var n=o.default.converter(r);return t.redirect(a.prepareRedirectLoginUri(e,n.message,e.originalUrl))}}))}static authMe(e,t,r){return n(this,void 0,void 0,(function*(){const{body:r}=e;if(!r.username||!r.password)throw new o.default("Kullanıcı adı ve şifre boş kalamaz.");try{var n=yield s.querier("SELECT * FROM admins WHERE username = $1 AND password = $2",[r.username,r.password]);if(1==n.success){if(0!=n.data.rowCount){const r=i.sign(n.data.rows[0],process.env.PHIBER_SECRET,a.jwtSignOptions());new c(e,t).set("phiber",r,a.setCookieOptions());const o={success:!0,token:r};return t.json(o)}throw new o.default("Kullanıcı adı ya da şifre yanlış.")}throw new o.default("Veritabanı doğrulaması yanlış döndü. Bu hata birden fazla durumda karşına çıkıyorsa yazılımcıya danış.",n.error.code,"login if else",n.error)}catch(e){throw new o.default("Veritabanıyla alakalı bir hata oldu. Hata Kodu = "+e.message,e.code,null,e)}}))}static quit(e,t){return n(this,void 0,void 0,(function*(){const r=a.prepareRedirectLoginUri(e,"Başarıyla çıkış yapıldı.");return t.clearCookie("phiber").redirect(r)}))}}t.default=u},function(e,t){e.exports=e=>{const t={PHIBER_TOKEN:"Lappaletta8!",PHIBER_SECRET:"18f1f537c1fa1fcc12a3c0476e19c98c",E_URI:"https://efaturaservice.turkcellesirket.com",E_TOKEN_URI:"https://core.turkcellesirket.com/v1/token",E_TEST_USERNAME:"gumusistan@service.com",E_TEST_PASSWORD:"asd123",E_GMST_USERNAME:"gumusistanbackend@gmail.com",E_GMST_PASSWORD:"Lappaletta8!",E_ISC_USERNAME:"iscmadencilik@servis.com.tr",E_ISC_PASSWORD:"Isc1234.",C_URI:"https://apis.ciceksepeti.com",C_TEST_URI:"https://sandbox-apis.ciceksepeti.com",C_ISC_TOKEN:"g2sDGe58zB8jARWzTuAjL5O5NrF05j5O5S52VyJp",C_GMST_TOKEN:"D5TVxfYIYv7k81Bg0c0mja4eHmuN7B8R4CwUTrpt",DEFAULT_AVATAR:"https://storage.googleapis.com/phiber-blue-silver/avatars/default_avatar.png",GOOGLE_CLOUD_URI:"https://storage.googleapis.com/gumusistan"};return"production"===e?{DB_USER:"abydudcarhalgs",DB_PASSWORD:"d2b9b3f3a4f0d881166ced3cdd8b3e6ff95c663f7e5e9d8cfa90e4e48b5fd67c",DB_HOST:"ec2-54-75-244-161.eu-west-1.compute.amazonaws.com",DB_DATABASE:"dfhnp9ali6rvj2",RUNNER:"https://gumusistem.herokuapp.com/api",IDEA_REDIRECT_URI:"https://gumusistem.herokuapp.com/api/ideas/token_getted",IDEA_CLIENT_ID:"8_5cqas1t7eikgsw8cskwgwgw0g8s88gswocwwwk4s0w4cow08s",IDEA_CLIENT_SECRET:"5cq2pbed9ows88o88gk8kgs8gs8cgg8sk80cok0k0sk44s0owg",...t}:{DB_USER:"postgres",DB_PASSWORD:"alakamyok8",DB_HOST:"localhost",DB_DATABASE:"gumusistan",IDEA_REDIRECT_URI:"http://localhost:4000/external/ideasoft/token_getted",IDEA_CLIENT_ID:"10_1jly6b3lf6e8g0cokckkww0o4g4wksck8080s0ks4c8c44sgw8",IDEA_CLIENT_SECRET:"26rqo1sg0w68kog44804s8ww484kw8c0k4840ksco0wg8okkc8",...t}}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.updateAdmin=t.deleteAdmin=t.addAdmin=t.singleAdmin=t.allAdmins=void 0;const o=r(4),i=r(3),s=r(1),a=r(4);t.allAdmins=(e,t,r)=>n(void 0,void 0,void 0,(function*(){const{query:r}=e;var n=o.PaginationHandler(r,"adminId"),a=yield i.querier(`SELECT * FROM admins ORDER BY "${n.order}" ${n.type} LIMIT ${n.limit} OFFSET ${n.offset} `);if(1==a.success){const e={success:!0,data:a.data};return t.json(e)}throw new s.default("Veritabanından veri alınırken bir hata oldu.",null,"alladmins fonksiyonu if else",a.error)}));t.singleAdmin=(e,t,r)=>n(void 0,void 0,void 0,(function*(){const{params:{id:r}}=e;var n=yield i.querier('SELECT * FROM admins WHERE "adminId" = '+r);if(1==n.success){const e={success:!0,data:n.data};return t.json(e)}throw new s.default("Veritabanından veri alınırken bir hata oldu.",null,"singleadmins fonksiyonu if else",n.error)}));t.addAdmin=(e,t)=>n(void 0,void 0,void 0,(function*(){var{body:r}=e;const n=r;var o=yield i.querier("INSERT into admins(username,password,fullname,mail,personel_website,profile_pic, isseller) VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING *",[n.username,n.password,n.fullname,n.mail||"gumusistem@default.com",n.personel_website||"https://gumusistan.com",n.profile_pic,n.isseller||!0]);if(1==o.success){const e={success:!0,data:o.data,message:"Yönetici başarıyla eklendi. Eklenen Yönetici Numarası : "+o.data.rows[0].adminId};return t.json(e)}throw new s.default(o.message,o.error.code,"addadmins if else",o.error)}));t.updateAdmin=(e,t)=>n(void 0,void 0,void 0,(function*(){var{body:r,params:n}=e;const o=r,c=a.DatabaseBodyHandler(o);var u=yield i.querier(`UPDATE admins SET\n    ${c} \n     WHERE "adminId" = ${n.id}`,Object.values(o));if(1==u.success){const e={success:!0,message:"Yönetici başarıyla güncellendi."};return t.json(e)}throw new s.default(u.message,u.error.code,"addadmins if else",u.error)}));t.deleteAdmin=(e,t)=>n(void 0,void 0,void 0,(function*(){var{params:r}=e,n=yield i.querier('DELETE FROM admins WHERE "adminId" = '+r.id);if(1==n.success){const e={success:!0,message:"Yönetici başarıyla silindi."};return t.json(e)}throw new s.default("Yönetici silinemedi!",n.error.code,"deleteadmins if else",n.error)}))},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.updateCiceksepetiKey=t.deleteCiceksepetiKey=t.addCiceksepetiKey=t.singleCiceksepetiKey=t.allCiceksepetiKeys=void 0;const o=r(3),i=r(1),s=r(4),a="ciceksepeti_keys";t.allCiceksepetiKeys=(e,t,r)=>n(void 0,void 0,void 0,(function*(){const{query:r}=e;var n=s.PaginationHandler(r,"ckid"),c=yield o.querier(`SELECT * FROM ${a} ORDER BY "${n.order}" ${n.type} LIMIT ${n.limit} OFFSET ${n.offset} `);if(1==c.success){const e={success:!0,data:c.data};return t.json(e)}throw new i.default("Veritabanından veri alınırken bir hata oldu.",null,`all${a} fonksiyonu if else`,c.error)}));t.singleCiceksepetiKey=(e,t,r)=>n(void 0,void 0,void 0,(function*(){const{params:{id:r}}=e;var n=yield o.querier(`SELECT * FROM ${a} WHERE "ckid" = ${r}`);if(1==n.success){const e={success:!0,data:n.data};return t.json(e)}throw new i.default("Veritabanından veri alınırken bir hata oldu.",null,`single${a} fonksiyonu if else`,n.error)}));t.addCiceksepetiKey=(e,t)=>n(void 0,void 0,void 0,(function*(){var{body:r}=e;const n=r;var s=yield o.querier(`INSERT into ${a}(name,uniq,values,magaza) VALUES ($1,$2,$3,$4) RETURNING *`,[n.name,n.uniq,n.values,n.magaza]);if(1==s.success){const e={success:!0,data:s.data,message:"Anahtar başarıyla eklendi. Eklenen Anahtar Numarası : "+s.data.rows[0].ckid};return t.json(e)}throw new i.default(s.message,s.error.code,`add${a} if else`,s.error)}));t.updateCiceksepetiKey=(e,t)=>n(void 0,void 0,void 0,(function*(){var{body:r,params:n}=e;const c=r,u=s.DatabaseBodyHandler(c);var d=yield o.querier(`UPDATE ${a} SET\n    ${u} \n     WHERE "ckid" = ${n.id}`,Object.values(c));if(1==d.success){const e={success:!0,message:"Anahtar başarıyla güncellendi."};return t.json(e)}throw new i.default(d.message,d.error.code,`add${a} if else`,d.error)}));t.deleteCiceksepetiKey=(e,t)=>n(void 0,void 0,void 0,(function*(){var{params:r}=e,n=yield o.querier(`DELETE FROM ${a} WHERE "ckid" = ${r.id}`);if(1==n.success){const e={success:!0,message:"Anahtar başarıyla silindi."};return t.json(e)}throw new i.default("Anahtar silinemedi!",n.error.code,`delete${a} if else`,n.error)}))},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});var o={type:"service_account",project_id:"gumusistan-283813",private_key_id:"048f1911d43a19e0ee29d2859f39e07a46118389",private_key:"-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC25mRRKoWPir+l\npiNXO5EfiwG7piqd9LNYL2zaKCqfbuaJjdEF6GyeWCCoKCTVRlAFB7fkELrOI6Ca\nYDrwf2bQiM0TpS0+AMukjjDC4NcEkOp4M+eZxs/KB4rualXJ5enfEXgyma8wdRPJ\n0zVH3vyIB0dNon+nIXe0w3uJnlo5dESngPD1HcHzbzo777kh7sV2ZKjskRInDn9e\nm5gkHneNIUS6nPu6h05l0hJ6+EU63xLqjS4MCLyYOcbEdMM/L2gmGHUKm9GXXBLd\nf0O0RA9+QS5zV72/d3U45c4L0i2ERle1EQ9JhmlVb2+8zqB6kUwLDg7uScLmoFi3\n15WxFUQvAgMBAAECggEAHJzvy2Ay7ivZ+NjZj9y6bWGFGeLQU/m40kOebIVQIF/B\nzSR/M29oXrU8FqfWa08erErIJ/O+EGBeewgxmveIvCL1V5dwUSeKtD79EzUILlIF\nfFySZOpHY5HJLayQ/eRBXCu9eXJgMofTsAVMwTukl3CcD7crmpflGZsOCToutJdf\nC5jgwiUUDANYOPj/2Ig26BV1PO8hfPrLztnIf31gwYgp1vKcIMKhlaVrenCMgKRO\nFiMXhmx4OFVY3uHDIMC94EHsXYbjG9xKzvIcguY4XQ/i1wV86XfrC658AHrBoDLX\nt3NEzzSuUSkyjA04jjeD1C6UWg7HIYO+8NAiek1mYQKBgQDzhE8BQNzlUL4pSY47\nlcDD35oA+3S0sXSAvtCWfl/t5yPaG2F5181h3WTEaACXIQA2UcATppzAtQj4BKHa\nXKtrPizn8gy0lo/WaULY5d+T3LlXPKiN08VVC7PCNoGQH+F21iGHUHvlHbMD3Xyt\n2jHFGbuZ4hKUdaDgmJ4CrNgwyQKBgQDARppqNdjeeP3mCryft47RMQIngfBorRNo\neACfgPFio/xu9J2XrKhSCKSsz3eMYTIKZVXb6z1gIHE/cAG8IJeQjF8oxGHA5fqx\n/o7+zEKcJFzQIg04+AsJQ9AGf8S3870FgGUHgNG3IBgU+1/hy29OdBVek4Ua9Uuy\nZw8k/eIBNwKBgEDRIsZOoX1YNIWA0p8BiUGZrsA8LiA6a6wpHhQwpxAHyf8v8o4f\n5sb5yuyMUjvnyMqsj9erLWYNyclaUkpxCB+PeRxzzPX0bWzAr85TwWL2CU8zEhpO\nF+Q/LSWwpGPcWILtFBeUUKX3dcK9nYYY4c54vvqCtjdV5/BgLw6/OvwhAoGAFJ/+\nNGJuTv7/jUudjCxuf3YYWxCPL0tRh6VHu9RjEEey7lwDA6AbtiEDOR5QHpjWe1L/\ncMW9IbCZNUrYhMuiNnk4Q/E84ypISAucXyyeAI3N/u2IKZJB7M5/ZBMUkP7uScbK\nD5H77P7eVnHYiSn/WJUPLcP5RTkG065Ga5toQOUCgYBSXBNTWauCNSFWmzmSxFOO\nEORzabXqgSTheeQgmz4RKyGYi+sFoznkkonhs1I2Gv7YmOxKUySDCnU4CmcO9wR+\n8PX9Ghh0CTL+v84QjrgWiEFYW+fuAgUikQTNHeYq+O3Xo83whmEEJc7TozJQ0Jcy\nQ0kWH+gYV/V0RtsFqAQCag==\n-----END PRIVATE KEY-----\n",client_email:"phibershinigami@gumusistan-283813.iam.gserviceaccount.com",client_id:"100539065648628384871",auth_uri:"https://accounts.google.com/o/oauth2/auth",token_uri:"https://oauth2.googleapis.com/token",auth_provider_x509_cert_url:"https://www.googleapis.com/oauth2/v1/certs",client_x509_cert_url:"https://www.googleapis.com/robot/v1/metadata/x509/phibershinigami%40gumusistan-283813.iam.gserviceaccount.com"};const i=r(54);class s{constructor(){this.storage=new i.Storage({credentials:o})}getFiles(){return n(this,void 0,void 0,(function*(){return yield this.storage.bucket(this.bucket).getFiles()}))}sendFile(e,t){return n(this,void 0,void 0,(function*(){var r={gzip:!0,metadata:{cacheControl:"public, max-age=31536000"}};return t&&(r.destination=t),yield this.storage.bucket(this.bucket).upload(e,r)}))}deleteFile(e){return n(this,void 0,void 0,(function*(){return yield this.storage.bucket(this.bucket).file(e).delete()}))}}s.prototype.bucket="gumusistan",t.default=s},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.objectToQuery=t.imageToBuffer=t.prepareImageName=void 0;const o=r(6),i=r(55),s=r(13);t.prepareImageName=e=>{const t=i.getExtension(e.mimetype);return`${s()}-${s()}-${s()}.${t}`},t.imageToBuffer=e=>n(void 0,void 0,void 0,(function*(){const t=yield o.default.get(e,{responseType:"arraybuffer"});return Buffer.from(t.data)})),t.objectToQuery=e=>{const t=Object.keys(e);var r=[];return t.forEach(t=>{r.push(`${t}=${e[t]}`)}),r.join("&")}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.saveLinkController=t.saveLink=t.saveBuffer=t.saveFile=t.cleanSingle=t.cleanAll=t.viewCompare=t.viewDb=t.viewList=void 0;const o=r(6),i=r(20),s=r(3),a=r(23),c=r(1),u=r(24),d=()=>n(void 0,void 0,void 0,(function*(){var e=new i.default;return((e,t)=>{var r=[];return e[t].forEach(e=>{var{metadata:t}=e;"0"==t.size||t.name.includes("default")||(t.name.includes("avatars")||t.name.includes("products"))&&r.push({link:t.mediaLink,name:t.name,size:Number(t.size),pretty:u(Number(t.size))})}),r?r.sort((e,t)=>t.size-e.size):[]})(yield e.getFiles(),0)})),l=()=>n(void 0,void 0,void 0,(function*(){var e=[],t=yield s.querier('SELECT "imagex" as "image" FROM GET_IMAGE_LIST()');if(1==t.success)return console.log(t.data.rows),t.data.rows.forEach(t=>{e.push(t.image)}),e;throw new c.default("Ürün fotoğrafları listelenirken bir hata oldu. Hata Kodu = "+t.message,null,null,t.error)}));t.viewDb=(e,t,r)=>n(void 0,void 0,void 0,(function*(){var e=yield l();return t.json({success:!0,count:e.length,data:e})}));t.viewCompare=(e,t,r)=>n(void 0,void 0,void 0,(function*(){var e=yield n(void 0,void 0,void 0,(function*(){var e=yield l(),t=yield d(),r=[];return t.forEach(t=>{t&&(e.includes(t.link)||r.push(t))}),r}));return t.json({success:!0,count:e.length,data:e})}));t.viewList=(e,t,r)=>n(void 0,void 0,void 0,(function*(){var e=yield d();return t.json({success:!0,count:e.length,data:e})}));const f=e=>n(void 0,void 0,void 0,(function*(){var t=new i.default;return yield t.deleteFile(e)}));t.cleanSingle=(e,t,r)=>n(void 0,void 0,void 0,(function*(){var{body:r}=e,n=yield f(r.fileName);return t.json({success:!0,data:n})}));t.cleanAll=(e,t,r)=>n(void 0,void 0,void 0,(function*(){for(var{body:r}=e,n=0;n<r.fileNames.length;n++)yield f(r.fileNames[n]);return t.json({success:!0,message:"Dosyalar başarıyla silindi"})}));t.saveFile=(e,t)=>n(void 0,void 0,void 0,(function*(){var{file:r,body:{path:n}}=e;if(r){var o=new i.default,s=yield o.sendFile(r.path,n);return t.json({success:!0,data:s[0].metadata})}throw new c.default("Dosya yok.")}));t.saveBuffer=(e,t)=>n(void 0,void 0,void 0,(function*(){var{body:{buffer:r,path:n}}=e;yield a.writeFileSync("/tmp/willSendToGoogle",r);var o=new i.default,s=yield o.sendFile("/tmp/willSendToGoogle",n);return t.json({success:!0,data:s[0].metadata})}));const v=(e,t)=>n(void 0,void 0,void 0,(function*(){try{t.startsWith("//")&&(t="https:"+t);const n=yield o.default.get(t,{responseType:"arraybuffer"});yield a.writeFileSync("/tmp/willSendToGoogle",Buffer.from(n.data));var r=new i.default;return{success:!0,data:(yield r.sendFile("/tmp/willSendToGoogle",e))[0].metadata}}catch(e){return{success:!1,message:e.message}}}));t.saveLinkController=v;t.saveLink=(e,t)=>n(void 0,void 0,void 0,(function*(){var{body:{path:r,link:n}}=e;const o=yield v(r,n);return t.json(o)}))},function(e,t){e.exports=require("fs")},function(e,t){e.exports=require("pretty-bytes")},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.converter_ideasoft_products_to_api=t.converter_ideasoft_orders_to_api=void 0,t.converter_ideasoft_orders_to_api=(e,t,r)=>{const n={data:[],failures:[]},o=r||999999;for(var i=0;i<e.length;i++){var s=e[i];if(s.id>o)break;try{const{firstname:e,surname:r,location:o,subLocation:i,address:l,mobilePhoneNumber:f}=s.shippingAddress,v={buyername:`${e} ${r}`,buyeradres:l,buyeril:o,buyerilce:i,buyerphone:f};for(var a=[],c=0;c<s.orderItems.length;c++){const e=s.orderItems[c],r=t.find(t=>t.ideasoft==e.product.id);if(!r)throw new Error("Siparişi içeren ürünlerden biri bulunamadı.");var u="",d="BİLİNMİYOR";e.orderItemCustomizations.forEach(e=>{e.productCustomizationFieldName.includes("Reng")?d=e.productCustomizationFieldValue:u+=`${e.productCustomizationFieldName} = ${e.productCustomizationFieldValue} \n`}),a.push({id:r.productId,description:u,color:d})}const p=Object.assign(Object.assign({},v),{basket:a,price:Math.round(s.finalAmount),seller:1,ideasoft_id:s.id,magaza:"isc",note:"BU SİPARİŞ OTOMATİK OLARAK SİTEDEN ÇEKİLMİŞTİR."});n.data.push(p)}catch(e){n.failures.push({id:s.id,message:e.message,type:"fail"})}}return n},t.converter_ideasoft_products_to_api=(e,t)=>{const r={data:[],failures:[]},n=t||999999;for(var o=0;o<e.length;o++){var i=e[o];if(!(i.id>n)&&(!i.parent&&1==i.status))try{const{directoryName:e,filename:t,extension:n,revision:o}=i.images[0],s=`//st3.myideasoft.com/idea/cv/99/myassets/products/${e}/${t}.${n}?revision=${o}`,{category:a}=i.productToCategories[0],c={name:i.name,image:s,ideasoft:i.id,typeDescription:a.name};r.data.push(c)}catch(e){r.failures.push({id:i.id,message:e.message,type:"fail"})}}return r}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.getToken=t.token_checker=t.token_redirect=void 0;const o=r(9),i=r(11),s=r(10),a=r(1),c=r(12),u=(e,t)=>n(void 0,void 0,void 0,(function*(){try{const r=yield o.turkcell_controller_json_to_form(e);return{success:!0,access_token:(yield t.post("",r)).data.access_token}}catch(e){return{success:!1,message:e.message,error:e}}}));t.getToken=u;t.token_redirect=(e,t,r)=>n(void 0,void 0,void 0,(function*(){const r=s.magazaDestructor(e),n=s.Turkcell_DefaultUsers[r];var a=o.turkcell_controller_token_api;"test"==r&&(a=i.turkcell_test_token_api);const d=yield u(n,a),l=c.prepareRedirectUri(e);return 1==d.success?t.cookie("turkcell_auth_"+r,d.access_token,c.expressCookieOptions(4)).redirect(`${l}/fatura/security/${r}?success&token=${d.access_token}`):t.redirect(`${l}/fatura/security/${r}?error=${d.message}`)}));t.token_checker=(e,t)=>{try{var r;r=t||s.magazaDestructor(e);const{cookies:n}=e;if(n["turkcell_auth_"+r])return n["turkcell_auth_"+r];throw new a.default("Güvenlik Zafiyatı. Lütfen Fatura/Güvenlik Duvarı bölümünden ilgili mağazanın duvarını geç.",null,"token_checker if else")}catch(e){throw new a.default("Güvenlik Zafiyatı. Lütfen Fatura/Güvenlik Duvarı bölümünden ilgili mağazanın duvarını geç. Hata Kodu = "+e.message,e.code,"token_checker try catch",e)}}},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.ciceksepeti_controller_api_handler=t.ciceksepeti_controller_api=t.ciceksepeti_controller_magazalar=void 0;const i=r(6),s=r(10),a={isc:"g2sDGe58zB8jARWzTuAjL5O5NrF05j5O5S52VyJp",gmst:"D5TVxfYIYv7k81Bg0c0mja4eHmuN7B8R4CwUTrpt"};t.ciceksepeti_controller_magazalar=a;const c=i.default.create({baseURL:process.env.C_URI,headers:{"Content-Type":"application/json"}});t.ciceksepeti_controller_api=c;t.ciceksepeti_controller_api_handler=e=>{const t=s.magazaDestructor(e);return c.defaults.headers["x-api-key"]=a[t],{api:c,magaza:t}},o(r(93),t)},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(94),t),o(r(123),t),o(r(138),t),o(r(139),t),o(r(140),t),o(r(142),t),o(r(151),t),o(r(165),t)},function(e,t){e.exports=require("excel4node")},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=r(0),i=r(31),s=r(32),a=r(36),c=i.default({dev:!1,dir:"./client/"}),u=c.getRequestHandler(),d=process.env.PORT||4e3;n(void 0,void 0,void 0,(function*(){try{yield c.prepare();const t=o(),n=r(37);var e=r(17)("production");Object.keys(e).forEach(t=>{process.env[t]=e[t]}),t.use(o.json()),t.use(a()),t.use("/",n),t.use("/joint/",o.static("./server/public/")),t.use(s.default),t.all("*",(e,t)=>u(e,t)),t.listen(d,e=>{if(e)throw e;console.log(`> Ready on localhost:${d} - env production \n`)})}catch(e){console.error(e),process.exit(1)}}))},function(e,t){e.exports=require("next")},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=r(16);var i=["/_next","/assets","/styles","/joint","/api","/login","/auth","/util","/external"];t.default=(e,t,r)=>n(void 0,void 0,void 0,(function*(){const{originalUrl:n,url:s}=e;var a=!0;i.forEach(e=>{n.startsWith(e)&&(a=!1)}),a?o.default.loginRedirector(e,t,r):r()}))},function(e,t){e.exports=require("jsonwebtoken")},function(e,t){e.exports=require("pg")},function(e,t){e.exports=require("cookies")},function(e,t){e.exports=require("cookie-parser")},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),o=r(38),i=r(39),s=r(64),a=r(65),c=r(72),u=r(73),d=n.Router();d.get("/hello",(e,t)=>t.json({say:"Hi",developer:"PhiberSoft"})),d.use("/auth",s.default),d.use("/api",i.default),d.use("/util",a.default),d.use("/dynamics",c.default),d.use("/external",u.default),d.use(o.default),e.exports=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=(e,t,r,n)=>e?r.json({success:!1,message:e.message,hint:e.hint,original:e.original,stack:e.stack}):n()},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),o=r(40),i=r(41),s=r(43),a=r(45),c=r(46),u=r(47),d=r(48),l=r(52),f=r(56),v=r(58),p=r(60),y=r(62),h=n.Router();h.use("/products",l.default),h.use("/buyers",s.default),h.use("/admins",o.default),h.use("/atolye_token",i.default),h.use("/cargos",a.default),h.use("/ciceksepeti_keys",c.default),h.use("/ciceksepeti_products",u.default),h.use("/types",f.default),h.use("/orders",d.default),h.use("/query",v.default),h.use("/saved_faturas",p.default),h.use("/stocks",y.default),t.default=h},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=r(0),i=r(18),s=r(5),a=r(2),c=o.Router();c.get("/",a(i.allAdmins)),c.post("/",[a((e,t,r)=>n(void 0,void 0,void 0,(function*(){return s.default(["username","password","fullname","mail"],e.body),r()}))),a(i.addAdmin)]),c.get("/:id",a(i.singleAdmin)),c.post("/:id",[a(i.updateAdmin)]),c.delete("/:id",a(i.deleteAdmin)),t.default=c},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=r(0),i=r(42),s=r(5),a=r(2),c=o.Router();c.get("/",a(i.allAtolyeTokens)),c.post("/",[a((e,t,r)=>n(void 0,void 0,void 0,(function*(){return s.default(["name","data"],e.body),r()}))),a(i.addAtolyeToken)]),c.get("/:id",a(i.singleAtolyeToken)),c.post("/:id",[a(i.updateAtolyeToken)]),c.delete("/:id",a(i.deleteAtolyeToken)),t.default=c},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.updateAtolyeToken=t.deleteAtolyeToken=t.addAtolyeToken=t.singleAtolyeToken=t.allAtolyeTokens=void 0;const o=r(3),i=r(1),s=r(4),a="atolye_token";t.allAtolyeTokens=(e,t,r)=>n(void 0,void 0,void 0,(function*(){const{query:r}=e;var n=s.PaginationHandler(r,"atId"),c=yield o.querier(`SELECT * FROM ${a} ORDER BY "${n.order}" ${n.type} LIMIT ${n.limit} OFFSET ${n.offset} `);if(1==c.success){const e={success:!0,data:c.data};return t.json(e)}throw new i.default("Veritabanından veri alınırken bir hata oldu.",null,`all${a} fonksiyonu if else`,c.error)}));t.singleAtolyeToken=(e,t,r)=>n(void 0,void 0,void 0,(function*(){const{params:{id:r}}=e;var n=yield o.querier(`SELECT * FROM ${a} WHERE "atId" = ${r}`);if(1==n.success){const e={success:!0,data:n.data};return t.json(e)}throw new i.default("Veritabanından veri alınırken bir hata oldu.",null,`single${a} fonksiyonu if else`,n.error)}));t.addAtolyeToken=(e,t)=>n(void 0,void 0,void 0,(function*(){var{body:r}=e;const n=r;var s=yield o.querier(`INSERT into ${a}(name,data) VALUES ($1,$2) RETURNING *`,[n.name,n.data]);if(1==s.success){const e={success:!0,data:s.data,message:"Anahtar başarıyla eklendi. Eklenen Anahtar Numarası : "+s.data.rows[0].atId};return t.json(e)}throw new i.default(s.message,s.error.code,`add${a} if else`,s.error)}));t.updateAtolyeToken=(e,t)=>n(void 0,void 0,void 0,(function*(){var{body:r,params:n}=e;const c=r,u=s.DatabaseBodyHandler(c);var d=yield o.querier(`UPDATE ${a} SET\n    ${u} \n     WHERE "atId" = ${n.id}`,Object.values(c));if(1==d.success){const e={success:!0,message:"Anahtar başarıyla güncellendi."};return t.json(e)}throw new i.default(d.message,d.error.code,`add${a} if else`,d.error)}));t.deleteAtolyeToken=(e,t)=>n(void 0,void 0,void 0,(function*(){var{params:r}=e,n=yield o.querier(`DELETE FROM ${a} WHERE "atId" = ${r.id}`);if(1==n.success){const e={success:!0,message:"Anahtar başarıyla silindi."};return t.json(e)}throw new i.default("Anahtar silinemedi!",n.error.code,`delete${a} if else`,n.error)}))},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=r(0),i=r(44),s=r(5),a=r(2),c=o.Router();c.get("/",a(i.allBuyers)),c.post("/",[a((e,t,r)=>n(void 0,void 0,void 0,(function*(){return s.default(["buyername","buyeradres","buyeril","buyerilce"],e.body),r()}))),a(i.addBuyer)]),c.get("/:id",a(i.singleBuyer)),c.post("/:id",[a(i.updateBuyer)]),c.delete("/:id",a(i.deleteBuyer)),t.default=c},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.updateBuyer=t.deleteBuyer=t.addBuyer=t.singleBuyer=t.allBuyers=void 0;const o=r(3),i=r(1),s=r(4);t.allBuyers=(e,t,r)=>n(void 0,void 0,void 0,(function*(){const{query:r}=e;var n=s.PaginationHandler(r,"buyerId"),a=yield o.querier(`SELECT * FROM buyers ORDER BY "${n.order}" ${n.type} LIMIT ${n.limit} OFFSET ${n.offset} `);if(1==a.success){const e={success:!0,data:a.data};return t.json(e)}throw new i.default("Veritabanından veri alınırken bir hata oldu.",null,"allbuyers fonksiyonu if else",a.error)}));t.singleBuyer=(e,t,r)=>n(void 0,void 0,void 0,(function*(){const{params:{id:r}}=e;var n=yield o.querier('SELECT * FROM buyers WHERE "buyerId" = '+r);if(1==n.success){const e={success:!0,data:n.data};return t.json(e)}throw new i.default("Veritabanından veri alınırken bir hata oldu.",null,"singlebuyers fonksiyonu if else",n.error)}));t.addBuyer=(e,t)=>n(void 0,void 0,void 0,(function*(){var{body:r}=e;const n=r;var s=yield o.querier("INSERT into buyers(buyername,buyerphone,buyeradres,buyeril,buyerilce,buyerinstagram) VALUES ($1,$2,$3,$4,$5,$6) RETURNING *",[n.buyername,n.buyerphone,n.buyeradres,n.buyeril,n.buyerilce,n.buyerinstagram]);if(1==s.success){const e={success:!0,data:s.data,message:"Müşteri başarıyla eklendi. Eklenen Müşteri Numarası : "+s.data.rows[0].buyerId};return t.json(e)}throw new i.default(s.message,s.error.code,"addbuyers if else",s.error)}));t.updateBuyer=(e,t)=>n(void 0,void 0,void 0,(function*(){var{body:r,params:n}=e;const a=r,c=s.DatabaseBodyHandler(a);var u=yield o.querier(`UPDATE buyers SET\n    ${c} \n     WHERE "buyerId" = ${n.id}`,Object.values(a));if(1==u.success){const e={success:!0,message:"Müşteri başarıyla güncellendi."};return t.json(e)}throw new i.default(u.message,u.error.code,"addbuyers if else",u.error)}));t.deleteBuyer=(e,t)=>n(void 0,void 0,void 0,(function*(){var{params:r}=e,n=yield o.querier('DELETE FROM buyers WHERE "buyerId" = '+r.id);if(1==n.success){const e={success:!0,message:"Müşteri başarıyla silindi."};return t.json(e)}throw new i.default("Müşteri silinemedi!",n.error.code,"deletebuyers if else",n.error)}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),o=r(18),i=r(2),s=n.Router();s.get("/",i(o.allAdmins)),s.post("/",[i(o.addAdmin)]),s.get("/:id",i(o.singleAdmin)),s.post("/:id",[i(o.updateAdmin)]),s.delete("/:id",i(o.deleteAdmin)),t.default=s},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=r(0),i=r(19),s=r(5),a=r(2),c=o.Router();c.get("/",a(i.allCiceksepetiKeys)),c.post("/",[a((e,t,r)=>n(void 0,void 0,void 0,(function*(){return s.default(["name","values","magaza"],e.body),r()}))),a(i.addCiceksepetiKey)]),c.get("/:id",a(i.singleCiceksepetiKey)),c.post("/:id",[a(i.updateCiceksepetiKey)]),c.delete("/:id",a(i.deleteCiceksepetiKey)),t.default=c},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=r(0),i=r(19),s=r(5),a=r(2),c=o.Router();c.get("/",a(i.allCiceksepetiKeys)),c.post("/",[a((e,t,r)=>n(void 0,void 0,void 0,(function*(){return s.default(["productcode","image","magaza"],e.body),r()}))),a(i.addCiceksepetiKey)]),c.get("/:id",a(i.singleCiceksepetiKey)),c.post("/:id",[a(i.updateCiceksepetiKey)]),c.delete("/:id",a(i.deleteCiceksepetiKey)),t.default=c},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=r(0),i=r(49),s=r(5),a=r(2),c=o.Router();c.get("/",a(i.allOrders)),c.post("/",[a((e,t,r)=>n(void 0,void 0,void 0,(function*(){return s.default(["seller","buyername","buyerphone","buyeradres","buyeril","buyerilce","basket"],e.body),r()}))),a(i.addOrder)]),c.get("/:id",a(i.singleOrder)),c.post("/:id",[a((e,t,r)=>n(void 0,void 0,void 0,(function*(){return s.default(["seller","buyername","buyerphone","buyeradres","buyeril","buyerilce","basket"],e.body),r()}))),a(i.updateOrder)]),c.delete("/:id",a(i.deleteOrder)),c.get("/view/order_basic",a(i.view_order_basic)),t.default=c},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.view_order_basic=t.updateOrder=t.deleteOrder=t.addOrder=t.singleOrder=t.allOrders=void 0;const o=r(7),i=r(4),s=r(3),a=r(1),c=r(7),u=r(50);t.allOrders=(e,t,r)=>n(void 0,void 0,void 0,(function*(){const{query:r}=e;var n=i.PaginationHandler(r,"orderId"),o=yield s.querier(`SELECT * FROM orders ORDER BY "${n.order}" ${n.type} LIMIT ${n.limit} OFFSET ${n.offset} `);if(1==o.success){const e={success:!0,data:o.data};return t.json(e)}throw new a.default("Veritabanından veri alınırken bir hata oldu.",null,"allorders fonksiyonu if else",o.error)}));t.singleOrder=(e,t,r)=>n(void 0,void 0,void 0,(function*(){const{params:{id:r}}=e;var n=yield s.querier('SELECT * FROM orders WHERE "orderId" = '+r);if(1==n.success){const e={success:!0,data:n.data};return t.json(e)}throw new a.default("Veritabanından veri alınırken bir hata oldu.",null,"singleorders fonksiyonu if else",n.error)}));t.addOrder=(e,t)=>n(void 0,void 0,void 0,(function*(){var{body:r}=e;const n=r;var o=yield c.addOrder(n);if(1==o.success){const e={success:!0,message:"Sipariş başarıyla eklendi. Eklenen Sipariş Numarası : "+o.data.rows[0].add_order};return t.json(e)}throw new a.default(o.message,o.error.code,"addorders if else",o.error)}));t.updateOrder=(e,t)=>n(void 0,void 0,void 0,(function*(){var{body:r,params:n}=e;const i=r;var s=yield o.editOrder(i);if(1==s.success){const e={success:!0,message:"Sipariş başarıyla güncellendi."};return t.json(e)}throw new a.default(s.message,s.error.code,"updateorders if else",s.error)}));t.deleteOrder=(e,t)=>n(void 0,void 0,void 0,(function*(){var{params:r}=e,n=yield s.querier('DELETE FROM orders WHERE "orderId" = '+r.id);if(1==n.success){const e={success:!0,message:"Sipariş başarıyla silindi."};return t.json(e)}throw new a.default("Sipariş silinemedi!",n.error.code,"deleteorders if else",n.error)}));t.view_order_basic=(e,t)=>n(void 0,void 0,void 0,(function*(){var r=yield s.querier(u.prepareOrderQueryFromStracth(e.query.distance||1));if(1==r.success){const e={success:!0,data:r.data};return t.json(e)}throw new a.default("Siparişler getirilirken bir hata oldu.",r.error.code,"view_order_basic if else",r.error)}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.prepareOrderQueryFromStracth=t.prepareOrderQuery=void 0;const n=r(51);t.prepareOrderQuery=(e,t,r,n)=>{var o="*";return r&&0!=r.length&&(o=r.join(",")),`SELECT ${o} FROM order_basic WHERE "time" BETWEEN '${e}' AND '${t}' ${n||""}`},t.prepareOrderQueryFromStracth=(e=1,r,o)=>{var{today:i,backday:s}=n.default.getBetweens(e);return t.prepareOrderQuery(s,i,r,o)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n{static getDatetimeLocal(e=new Date){e.toISOString().substring(0,19);var t=e.getFullYear(),r=e.getMonth()+1,n=e.getDate(),o=e.getHours(),i=e.getMinutes();e.getSeconds();return t+"-"+(r<10?"0"+r.toString():r)+"-"+(n<10?"0"+n.toString():n)+"T"+(o<10?"0"+o.toString():o)+":"+(i<10?"0"+i.toString():i)}static getBetweens(e=1){const t=new Date;var r=t.getTime();return t.setDate(t.getDate()-e),{today:r,backday:t.getTime()}}static getInputBetweens(e=1){let t=n.getDatetimeLocal(),r=new Date(new Date);return r.setDate(r.getDate()-e),{backday:n.getDatetimeLocal(r),today:t}}static getFullDate(e){var t,r=(t=e||new Date).getMonth()+1,n=r<10?"0"+r:r,o=t.getDate(),i=o<10?"0"+o:o;return`${t.getFullYear()}-${n}-${i}`}static getFullDateBetweens(e=1){const t=new Date,r=n.getFullDate(t);t.setDate(t.getDate()-1);return{today:r,backday:n.getFullDate(t)}}}t.default=n},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=r(0),i=r(53),s=r(5);var a=r(8)({dest:"/tmp/"});const c=r(2),u=o.Router();u.get("/",c(i.allProducts)),u.post("/",[a.single("product"),c(i.imagesMiddleware),c((e,t,r)=>n(void 0,void 0,void 0,(function*(){return s.default(["name","image","type"],e.body),r()}))),c(i.addProduct)]),u.get("/:id",c(i.singleProduct)),u.post("/:id",[a.single("product"),c(i.imagesMiddleware),c(i.updateProduct)]),u.delete("/:id",c(i.deleteProduct)),u.get("/view/product_full",c(i.view_productfull)),u.post("/functions/add_product",[c((e,t,r)=>n(void 0,void 0,void 0,(function*(){return s.default(["name","image","typeDescription"],e.body),r()}))),c(i.addProductFunction)]),u.post("/functions/add_product_with_link",[c((e,t,r)=>n(void 0,void 0,void 0,(function*(){return s.default(["name","image","typeDescription"],e.body),r()}))),c(i.addProductWithLink)]),t.default=u},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.addProductWithLink=t.addProductFunction=t.view_productfull=t.imagesMiddleware=t.updateProduct=t.deleteProduct=t.addProduct=t.singleProduct=t.allProducts=void 0;const o=r(7),i=r(3),s=r(1),a=r(20),c=r(13),u=r(4),d=r(21),l=r(22);t.allProducts=(e,t,r)=>n(void 0,void 0,void 0,(function*(){const{query:r}=e;var n=u.PaginationHandler(r,"productId"),o=yield i.querier(`SELECT * FROM products ORDER BY "${n.order}" ${n.type} LIMIT ${n.limit} OFFSET ${n.offset} `);if(1==o.success){const e={success:!0,data:o.data};return t.json(e)}throw new s.default("Veritabanından veri alınırken bir hata oldu.",null,"allproducts fonksiyonu if else",o.error)}));t.singleProduct=(e,t,r)=>n(void 0,void 0,void 0,(function*(){const{params:{id:r}}=e;var n=yield i.querier('SELECT * FROM products WHERE "productId" = '+r);if(1==n.success){const e={success:!0,data:n.data};return t.json(e)}throw new s.default("Veritabanından veri alınırken bir hata oldu.",null,"singleproducts fonksiyonu if else",n.error)}));t.addProduct=(e,t)=>n(void 0,void 0,void 0,(function*(){var{body:r}=e;const n=r;var o=yield i.querier("INSERT into products(name,image,type,ideasoft,stockcode,extra) VALUES ($1,$2,$3,$4,$5,$6) RETURNING *",[n.name,n.image,n.type,n.ideasoft||null,n.stockcode||null,n.extra||null]);if(1==o.success){const e={success:!0,data:o.data,message:"Ürün başarıyla eklendi. Eklenen Ürün Numarası : "+o.data.rows[0].productId};return t.json(e)}throw new s.default(o.message,o.error.code,"addProduct if else",o.error)}));t.addProductFunction=(e,t)=>n(void 0,void 0,void 0,(function*(){var r,n,{body:i,params:a}=e;const c=i;var u=yield o.addProduct(c);if(1==u.success){const e={success:!0,message:"Ürün başarıyla eklendi."};if(null===(n=null===(r=u.data.rows)||void 0===r?void 0:r[0])||void 0===n?void 0:n.add_product)return t.json(e);throw new s.default("Veritabanı bağlantısı başarılı fakat ürünü eklerken bir hata meydana geldi. Lütfen ürün bilgisini sakla.",null,null,null)}throw new s.default(u.message,u.error.code,"updateproducts if else",u.error)}));t.addProductWithLink=(e,t)=>n(void 0,void 0,void 0,(function*(){var r,n;try{const{body:i}=e,a=i,u=yield l.saveLinkController(`products/${c()}${c()}.jpg`,a.image);if(1==u.success){a.image=u.data.mediaLink;const e=yield o.addProduct(a);if(1==e.success){const o={success:!0,message:"Ürün başarıyla eklendi."};if(null===(n=null===(r=e.data.rows)||void 0===r?void 0:r[0])||void 0===n?void 0:n.add_product)return t.json(o);throw new s.default("addProductWithLink if add_product.data.rows[0].add_product")}throw new s.default("Ürün yüklemesi sırasında bir hata oluştu. Hata Kodu = "+e.message,e.error.code,"addProductWithLink add_product = false",e.error)}throw new s.default("Resim yüklemesi sırasında bir hata oluştu. Hata Kodu = "+u.message,null,"addProductWithLink try>if>else")}catch(e){throw new s.default("Genel bir hata döndü. Hata Kodu = "+e.message,e.code,"addProductWithLink try catch",e)}}));t.updateProduct=(e,t)=>n(void 0,void 0,void 0,(function*(){var{body:r,params:n}=e;const o=r,a=u.DatabaseBodyHandler(o);var c=yield i.querier(`UPDATE products SET\n    ${a} \n     WHERE "productId" = ${n.id}`,Object.values(o));if(1==c.success){const e={success:!0,message:"Ürün başarıyla güncellendi."};return t.json(e)}throw new s.default(c.message,c.error.code,"updateproducts if else",c.error)}));t.deleteProduct=(e,t)=>n(void 0,void 0,void 0,(function*(){var{params:r}=e,n=yield i.querier('DELETE FROM products WHERE "productId" = '+r.id);if(1==n.success){const e={success:!0,message:"Ürün başarıyla silindi."};return t.json(e)}throw new s.default("Ürün silinemedi!",n.error.code,"deleteproducts if else",n.error)}));t.imagesMiddleware=(e,t,r)=>n(void 0,void 0,void 0,(function*(){var{file:t,body:n}=e;if(t)try{var o=new a.default;const n=d.prepareImageName(t),i=(yield o.sendFile(t.path,"products/"+n))[0].metadata.mediaLink;return e.body.image=i,r()}catch(e){throw new s.default("Genel bir hata oldu. Hata Kodu = "+e.message,e.code,e.message,e)}else r()}));t.view_productfull=(e,t,r)=>n(void 0,void 0,void 0,(function*(){var e=yield i.querier('SELECT * FROM product_full ORDER BY "productId" DESC');if(1==e.success){const r={success:!0,data:e.data};return t.json(r)}throw new s.default("Veritabanından veri alınırken bir hata oldu.",null,"view_product_full fonksiyonu if else",e.error)}))},function(e,t){e.exports=require("@google-cloud/storage")},function(e,t){e.exports=require("mime")},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=r(0),i=r(57),s=r(5),a=r(2),c=o.Router();c.get("/",a(i.allTypes)),c.post("/",[a((e,t,r)=>n(void 0,void 0,void 0,(function*(){return s.default(["typeDescription"],e.body),r()}))),a(i.addType)]),c.get("/:id",a(i.singleType)),c.post("/:id",[a(i.updateType)]),c.delete("/:id",a(i.deleteType)),c.get("/view/type_full",a(i.view_type_full)),t.default=c},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.view_type_full=t.updateType=t.deleteType=t.addType=t.singleType=t.allTypes=void 0;const o=r(4),i=r(3),s=r(1),a=r(4);t.allTypes=(e,t,r)=>n(void 0,void 0,void 0,(function*(){const{query:r}=e;var n=o.PaginationHandler(r,"typeId"),a=yield i.querier(`SELECT * FROM types ORDER BY "${n.order}" ${n.type} LIMIT ${n.limit} OFFSET ${n.offset} `);if(1==a.success){const e={success:!0,data:a.data};return t.json(e)}throw new s.default("Veritabanından veri alınırken bir hata oldu.",null,"alltypes fonksiyonu if else",a.error)}));t.singleType=(e,t,r)=>n(void 0,void 0,void 0,(function*(){const{params:{id:r}}=e;var n=yield i.querier('SELECT * FROM types WHERE "typeId" = '+r);if(1==n.success){const e={success:!0,data:n.data};return t.json(e)}throw new s.default("Veritabanından veri alınırken bir hata oldu.",null,"singletypes fonksiyonu if else",n.error)}));t.addType=(e,t)=>n(void 0,void 0,void 0,(function*(){var{body:r}=e;const n=r;var o=yield i.querier('INSERT into types("typeDescription") VALUES ($1) RETURNING *',[n.typeDescription]);if(1==o.success){const e={success:!0,data:o.data,message:"Tip başarıyla eklendi. Eklenen Tip Numarası : "+o.data.rows[0].typeId};return t.json(e)}throw new s.default(o.message,o.error.code,"addtypes if else",o.error)}));t.updateType=(e,t)=>n(void 0,void 0,void 0,(function*(){var{body:r,params:n}=e;const o=r,c=a.DatabaseBodyHandler(o);var u=yield i.querier(`UPDATE types SET\n    ${c} \n     WHERE "typeId" = ${n.id}`,Object.values(o));if(1==u.success){const e={success:!0,message:"Tip başarıyla güncellendi."};return t.json(e)}throw new s.default(u.message,u.error.code,"addtypes if else",u.error)}));t.deleteType=(e,t)=>n(void 0,void 0,void 0,(function*(){var{params:r}=e,n=yield i.querier('DELETE FROM types WHERE "typeId" = '+r.id);if(1==n.success){const e={success:!0,message:"Tip başarıyla silindi."};return t.json(e)}throw new s.default("Tip silinemedi!",n.error.code,"deletetypes if else",n.error)}));t.view_type_full=(e,t)=>n(void 0,void 0,void 0,(function*(){var e=yield i.querier("SELECT * FROM type_full");if(1==e.success){const r={success:!0,data:e.data};return t.json(r)}throw new s.default("Tipler getirilemedi.",e.error.code,"view_type_full if else",e.error)}))},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=r(0),i=r(59),s=r(5),a=r(2),c=o.Router();c.post("/",[a((e,t,r)=>n(void 0,void 0,void 0,(function*(){return s.default(["query"],e.body),r()}))),a(i.getQueryResults)]),t.default=c},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.getQueryResults=void 0;const o=r(3),i=r(1);t.getQueryResults=(e,t)=>n(void 0,void 0,void 0,(function*(){const{body:{query:r,values:n}}=e;if(r){const e=yield o.querier(r,n||[]);if(1==e.success){const r={success:!0,data:e.data};return t.json(r)}throw new i.default("Veri tabanından veri alırken bir hata oldu.",e.error.code,"getQueryResults if else",e.error)}throw new i.default("Query nesnesi olmadan bu işlem yapılamaz.",null,null,{})}))},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=r(0),i=r(61),s=r(5),a=r(2),c=o.Router();c.get("/",a(i.allSavedFaturaKeys)),c.post("/",[a((e,t,r)=>n(void 0,void 0,void 0,(function*(){return s.default(["name","values","magaza"],e.body),r()}))),a(i.addSavedFaturaKey)]),c.get("/:id",a(i.singleSavedFaturaKey)),c.delete("/:id",a(i.deleteSavedFaturaKey)),t.default=c},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.deleteSavedFaturaKey=t.addSavedFaturaKey=t.singleSavedFaturaKey=t.allSavedFaturaKeys=void 0;const o=r(3),i=r(1),s=r(4),a="saved_faturas";t.allSavedFaturaKeys=(e,t,r)=>n(void 0,void 0,void 0,(function*(){const{query:r}=e;var n=s.PaginationHandler(r,"id"),c=yield o.querier(`SELECT * FROM ${a} ORDER BY "${n.order}" ${n.type} LIMIT ${n.limit} OFFSET ${n.offset} `);if(1==c.success){const e={success:!0,data:c.data};return t.json(e)}throw new i.default("Veritabanından veri alınırken bir hata oldu.",null,`all${a} fonksiyonu if else`,c.error)}));t.singleSavedFaturaKey=(e,t,r)=>n(void 0,void 0,void 0,(function*(){const{params:{id:r}}=e;var n=yield o.querier(`SELECT * FROM ${a} WHERE "id" = ${r}`);if(1==n.success){const e={success:!0,data:n.data};return t.json(e)}throw new i.default("Veritabanından veri alınırken bir hata oldu.",null,`single${a} fonksiyonu if else`,n.error)}));t.addSavedFaturaKey=(e,t)=>n(void 0,void 0,void 0,(function*(){var{body:r}=e;const n=r;var s=yield o.querier(`INSERT into ${a}(name,values,magaza) VALUES ($1,$2,$3) RETURNING *`,[n.name,JSON.stringify(n.values),n.magaza]);if(1==s.success){const e={success:!0,data:s.data,message:"Anahtar başarıyla eklendi. Eklenen Anahtar Numarası : "+s.data.rows[0].id};return t.json(e)}throw new i.default(s.message,s.error.code,`add${a} if else`,s.error)}));t.deleteSavedFaturaKey=(e,t)=>n(void 0,void 0,void 0,(function*(){var{params:r}=e,n=yield o.querier(`DELETE FROM ${a} WHERE "id" = ${r.id}`);if(1==n.success){const e={success:!0,message:"Anahtar başarıyla silindi."};return t.json(e)}throw new i.default("Anahtar silinemedi!",n.error.code,`delete${a} if else`,n.error)}))},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=r(0),i=r(63),s=r(5),a=r(2),c=o.Router();c.get("/",a(i.allStocks)),c.post("/",[a((e,t,r)=>n(void 0,void 0,void 0,(function*(){return s.default(["color"],e.body),r()}))),a(i.addStock)]),c.get("/:id",a(i.singleStock)),c.post("/:id",[a(i.updateStock)]),c.delete("/:id",a(i.deleteStock)),c.get("/view/product_stocks",a(i.view_product_stocks)),t.default=c},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.view_product_stocks=t.updateStock=t.deleteStock=t.addStock=t.singleStock=t.allStocks=void 0;const o=r(4),i=r(3),s=r(1),a=r(4);t.allStocks=(e,t,r)=>n(void 0,void 0,void 0,(function*(){const{query:r}=e;var n=o.PaginationHandler(r,"stockId"),a=yield i.querier(`SELECT * FROM stocks ORDER BY "${n.order}" ${n.type} LIMIT ${n.limit} OFFSET ${n.offset} `);if(1==a.success){const e={success:!0,data:a.data};return t.json(e)}throw new s.default("Veritabanından veri alınırken bir hata oldu.",null,"allstocks fonksiyonu if else",a.error)}));t.singleStock=(e,t,r)=>n(void 0,void 0,void 0,(function*(){const{params:{id:r}}=e;var n=yield i.querier('SELECT * FROM stocks WHERE "stockId" = '+r);if(1==n.success){const e={success:!0,data:n.data};return t.json(e)}throw new s.default("Veritabanından veri alınırken bir hata oldu.",null,"singlestocks fonksiyonu if else",n.error)}));t.addStock=(e,t)=>n(void 0,void 0,void 0,(function*(){var{body:r}=e;const n=r;var o=yield i.querier('INSERT into stocks(description,color,"productId") VALUES ($1,$2,$3) RETURNING *',[n.description,n.color,n.productId]);if(1==o.success){const e={success:!0,data:o.data,message:"Stok başarıyla eklendi. Eklenen Stok Numarası : "+o.data.rows[0].stockId};return t.json(e)}throw new s.default(o.message,o.error.code,"addstocks if else",o.error)}));t.updateStock=(e,t)=>n(void 0,void 0,void 0,(function*(){var{body:r,params:n}=e;const o=r,c=a.DatabaseBodyHandler(o);var u=yield i.querier(`UPDATE stocks SET\n    ${c} \n     WHERE "stockId" = ${n.id}`,Object.values(o));if(1==u.success){const e={success:!0,message:"Stok başarıyla güncellendi."};return t.json(e)}throw new s.default(u.message,u.error.code,"addstocks if else",u.error)}));t.deleteStock=(e,t)=>n(void 0,void 0,void 0,(function*(){var{params:r}=e,n=yield i.querier('DELETE FROM stocks WHERE "stockId" = '+r.id);if(1==n.success){const e={success:!0,message:"Stok başarıyla silindi."};return t.json(e)}throw new s.default("Stok silinemedi!",n.error.code,"deletestocks if else",n.error)}));t.view_product_stocks=(e,t)=>n(void 0,void 0,void 0,(function*(){var e=yield i.querier("SELECT * FROM product_stocks");if(1==e.success){const r={success:!0,data:e.data};return t.json(r)}throw new s.default("Ürün+Stoklar nesnesi getirilirken bir hata oldu.",e.error.code,"view_product_stocks if else",e.error)}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),o=r(16),i=r(2),s=n.Router();s.get("/check/basic",i(o.default.basic)),s.get("/check/super",i(o.default.super)),s.get("/check/cooker",i(o.default.cooker)),s.post("/login",i(o.default.authMe)),s.get("/quit",i(o.default.quit)),t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),o=r(66),i=r(67),s=r(70),a=n.Router();a.use("/storage",o.default),a.use("/excel",i.default),a.use("/file",s.default),t.default=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),o=r(22),i=r(8),s=n.Router(),a=r(2),c=i({dest:"/tmp/"});s.get("/list",a(o.viewList)),s.get("/db",a(o.viewDb)),s.get("/compare",a(o.viewCompare)),s.post("/clean/all",a(o.cleanAll)),s.post("/clean/single",a(o.cleanSingle)),s.post("/save/file",[c.single("file"),a(o.saveFile)]),s.post("/save/buffer",a(o.saveBuffer)),s.post("/save/link",a(o.saveLink)),t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),o=r(68),i=r(8),s=n.Router(),a=r(2),c=i({dest:"/tmp/"});s.post("/converter/json/sheet",a(o.jsonToSheet)),s.post("/converter/sheet/json",[c.single("excel"),a(o.sheetToJson)]),t.default=s},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.sheetToJson=t.jsonToSheet=void 0;const o=r(69),i=r(1);t.jsonToSheet=(e,t,r)=>n(void 0,void 0,void 0,(function*(){try{var r=o.utils.book_new(),{body:{data:n,options:s}}=e,a=o.utils.json_to_sheet(n,s||{});o.utils.book_append_sheet(r,a);const i={success:!0,output:yield o.write(r,{type:"base64",bookType:"xlsx"})};return t.json(i)}catch(e){throw new i.default("Dönüştürme sırasında bir hata oldu. Hata Kodu = "+e.message,null,null,Object.assign({},e))}}));t.sheetToJson=(e,t,r)=>n(void 0,void 0,void 0,(function*(){var{body:{options:r},file:n}=e,i={};r?i=JSON.parse(r):i.defval="";var s=o.readFile(n.path),a=s.Sheets[s.SheetNames[0]],c=o.utils.sheet_to_json(a,i||{});return t.json({success:!0,data:c})}))},function(e,t){e.exports=require("xlsx")},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),o=r(71),i=r(8),s=n.Router(),a=r(2),c=i({dest:"/tmp/"});s.post("/to/buffer",[c.single("file"),a(o.fileToBuffer)]),s.post("/upload/single",[c.single("file"),a(o.singleUpload)]),s.post("/upload/multiple",[c.array("files"),a(o.multipleUpload)]),t.default=s},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.multipleUpload=t.singleUpload=t.fileToBuffer=void 0;const o=r(23),i=r(24),s=r(1);t.singleUpload=(e,t)=>n(void 0,void 0,void 0,(function*(){try{var r=e.file;return r.size=i(r.size),t.json({success:!0,file:r})}catch(e){throw new s.default("Dosya yüklemesi sırasında bir hata oluştu. Hata Kodu = "+e.message,e.message,null,e)}}));t.multipleUpload=(e,t)=>n(void 0,void 0,void 0,(function*(){try{for(var r=e.files,n=0;n<r.length;n++)r[n].size=i(r[n].size);return t.json({success:!0,files:r})}catch(e){throw new s.default("Dosya yüklemeleri sırasında bir hata oluştu. Hata kodu = "+e.message,e.message,null,e)}}));t.fileToBuffer=(e,t)=>n(void 0,void 0,void 0,(function*(){var{file:r}=e;return t.json({success:!0,fileDetails:r,data:yield o.readFileSync(r.path)})}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0).Router();t.default=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),o=r(74),i=r(82),s=r(88),a=r(92),c=r(167),u=n.Router();u.use("/ideasoft",o.default),u.use("/aras",i.default),u.use("/turkcell",s.default),u.use("/ciceksepeti",a.default),u.use("/atolye",c.default),t.default=u},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=r(0),i=r(75),s=r(5),a=o.Router(),c=r(2);a.post("/add-product",[c((e,t,r)=>n(void 0,void 0,void 0,(function*(){return s.default(["link"],e.body),r()}))),c(i.AddProductIdeasoft)]),a.get("/token_redirect",c(i.token_redirect)),a.get("/token_getted",c(i.token_getted)),a.use(c(i.is_auth_middleware)),a.get("/token_refresh",[c(i.token_refresh)]),a.get("/orders",c(i.GetOrders)),a.get("/orders/set",c(i.SetOrders)),a.get("/products",c(i.GetProducts)),a.get("/products/set",c(i.SetProducts)),t.default=a},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(76),t),o(r(14),t)},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.AddProductIdeasoft=void 0;const o=r(77),{JSDOM:i}=r(78);t.AddProductIdeasoft=(e,t)=>n(void 0,void 0,void 0,(function*(){const r=yield o(e.body.link),n=new i(r.body);var s={success:!0};return s.name=n.window.document.querySelector(".product-title h1").textContent,s.image=n.window.document.querySelector("a[data-fancybox='gallery']").getAttribute("href"),s.category=n.window.document.querySelectorAll("[property='name'] > span")[1].textContent,t.json(s)}))},function(e,t){e.exports=require("got")},function(e,t){e.exports=require("jsdom")},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.is_auth_middleware=t.token_refresh=t.token_getted=t.token_redirect=void 0;const o=r(6),i=r(12),s=r(1),{IDEA_CLIENT_ID:a,IDEA_CLIENT_SECRET:c,IDEA_REDIRECT_URI:u}=process.env,d=o.default.create({baseURL:"http://gumusistan.com/oauth/v2",params:{grant_type:"authorization_code",client_id:a,client_secret:c,redirect_uri:u}});t.token_redirect=(e,t)=>n(void 0,void 0,void 0,(function*(){const e=`http://gumusistan.com/admin/user/auth?response_type=code&state=djsafksadkfdjass&redirect_uri=${u}&client_id=${a}`;return t.redirect(e)}));t.token_getted=(e,t,r)=>n(void 0,void 0,void 0,(function*(){var r=i.prepareRedirectUri(e);const{query:n}=e;if(n.error)return t.end(n.error);try{const e=yield d.get("/token",{params:Object.assign({code:n.code},d.defaults.params)});return t.cookie("ideasoft_auth",e.data.access_token,i.expressCookieOptions()).cookie("ideasoft_refresh",e.data.refresh_token,i.expressCookieOptions()).redirect(r+"/ideasoft/security-wall?success")}catch(e){return t.redirect(`${r}/ideasoft/security-wall?error=${e.message}`)}}));t.token_refresh=(e,t,r)=>n(void 0,void 0,void 0,(function*(){var{cookies:{ideasoft_refresh:r}}=e,n=i.prepareRedirectUri(e);if(!r)return t.redirect(`${n}/ideasoft-auth?error=${encodeURI("Çerezlerinde aradığımız şeyi bulamadık. Başka bir tarayıcıyla denemek işine yarayabilir.")}`);try{const e=yield d.get("/token",{params:Object.assign(Object.assign({},d.defaults.params),{grant_type:"refresh_token",refresh_token:r})});return t.cookie("ideasoft_auth",e.data.access_token,i.expressCookieOptions()).cookie("ideasoft_refresh",e.data.refresh_token,i.expressCookieOptions()).redirect(n+"/ideasoft/security-wall?success")}catch(e){return t.redirect(`${n}/ideasoft/security-wall?error=${e.message}`)}}));t.is_auth_middleware=(e,t,r)=>n(void 0,void 0,void 0,(function*(){const{cookies:{ideasoft_auth:t}}=e;if(t)return r();throw new s.default("Güvenlik kontrolünden geçemedin. Lütfen Ideasoft/Güvenlik Duvarı bölümünden anahtarını yenile.",null,null,{})}))},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))},o=this&&this.__rest||function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r};Object.defineProperty(t,"__esModule",{value:!0}),t.SetOrders=t.setOrders=t.GetOrders=t.getOrders=void 0;const i=r(3),s=r(1),a=r(25),c=r(14),u=r(7),d=(e,t)=>n(void 0,void 0,void 0,(function*(){const{cookies:{ideasoft_auth:t},query:r}=e,{startDate:n,endDate:i}=r,a=o(r,["startDate","endDate"]);if(n&&i){c.ideasoft_controller_api.defaults.headers.Authorization="Bearer "+t;const e=c.paramHandler(Object.assign({startDate:n,endDate:i},a));c.ideasoft_controller_api.defaults.params=e;return{success:!0,data:yield c.ideasoft_controller_loop(c.ideasoft_controller_api,"/orders")}}throw new s.default("startDate ve endDate parametreleri olmadan bu işlem yapılamaz.",null,null,{})}));t.getOrders=d;t.GetOrders=(e,t)=>n(void 0,void 0,void 0,(function*(){try{const r=yield d(e);return t.json(r)}catch(e){throw new s.default("Siparişleri getirirken bir hata oldu. Hata Kodu = "+e.message,e.code,"GetOrders try catch",e)}}));const l=(e,t)=>n(void 0,void 0,void 0,(function*(){try{const l=yield d(e);if(1==l.success){const d=yield i.querier('SELECT "productId","ideasoft" FROM products WHERE "ideasoft" IS NOT NULL');if(1==d.success){const{maxId:i}=e.query;var t=null;i&&(t=Number(i));const s=a.converter_ideasoft_orders_to_api(l.data,d.data.rows,t);for(var r=0,n=s.failures.length,o=[...s.failures],c=0;c<s.data.length;c++){const e=s.data[c],t=yield u.addOrder(e);1==t.success?(o.push({id:e.ideasoft_id,message:"Sipariş başarıyla eklendi. Sistemimizdeki ID : "+t.data.rows[0].add_order,type:"success"}),r++):(o.push({id:e.ideasoft_id,message:23505==t.error.code?"Sistemde zaten kayıtlı.":"Sipariş ayıklandı fakat veritabanına eklenemedi. Hata kodu = "+t.message,type:"fail"}),n++)}return{success:!0,success_count:r,fail_count:n,data:o}}throw new s.default("Siparişleri ürünlerle eşleştiremedik. Çünkü ürünleri getirirken bir hata oldu. Hata Kodu = "+d.message,d.error.code,"setOrders products if else",d.error)}throw new s.default("Siparişleri getirirken bir hata oldu. Hata kodu = "+l.message,null,"setOrders if else")}catch(e){throw new s.default("Siparişleri getirirken bir hata oldu. Hata kodu = "+e.message,e.code,"setOrders try catch",e)}}));t.setOrders=l;t.SetOrders=(e,t)=>n(void 0,void 0,void 0,(function*(){try{const r=yield l(e);return t.json(r)}catch(e){throw new s.default(e.message,e.code,"SetOrders try catch",e)}}))},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))},o=this&&this.__rest||function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r};Object.defineProperty(t,"__esModule",{value:!0}),t.SetProducts=t.setProducts=t.GetProducts=t.getProducts=void 0;const i=r(1),s=r(14),a=r(3),c=r(25),u=(e,t)=>n(void 0,void 0,void 0,(function*(){const{cookies:{ideasoft_auth:t},query:r}=e,{sinceId:n}=r,a=o(r,["sinceId"]);if(n){s.ideasoft_controller_api.defaults.headers.Authorization="Bearer "+t;const e=s.paramHandler(Object.assign({sinceId:n},a));s.ideasoft_controller_api.defaults.params=e;return{success:!0,data:yield s.ideasoft_controller_loop(s.ideasoft_controller_api,"/products")}}throw new i.default("sinceId parametreleri olmadan bu işlem yapılamaz.",null,null,{})}));t.getProducts=u;t.GetProducts=(e,t)=>n(void 0,void 0,void 0,(function*(){try{const r=yield u(e);return t.json(r)}catch(e){throw new i.default("Ürünleri getirirken bir hata oldu. Hata Kodu = "+e.message,e.code,"GetProducts try catch",e)}}));const d=(e,t)=>n(void 0,void 0,void 0,(function*(){try{const l=yield u(e);if(1==l.success){const u=yield a.querier('SELECT "productId","ideasoft" FROM products WHERE "ideasoft" IS NOT NULL');if(1==u.success){const{maxId:i}=e.query;var t=null;i&&(t=Number(i));const a=c.converter_ideasoft_products_to_api(l.data,t);for(var r=0,n=a.failures.length,o=[...a.failures],s=[],d=0;d<a.data.length;d++){const e=a.data[d],t=u.data.rows.find(t=>e.ideasoft==t.ideasoft);t?(o.push({id:e.ideasoft,message:"Ürün zaten sistemde kayıtlı. Sistemimizdeki Ürün ID : "+t.productId,type:"fail"}),n++):(s.push(e),r++)}return{success:!0,success_count:r,fail_count:n,data:o,products:s}}throw new i.default("Ürünleri ürünlerle eşleştiremedik. Çünkü ürünleri getirirken bir hata oldu. Hata Kodu = "+u.message,u.error.code,"setOrders products if else",u.error)}throw new i.default("Ideasofttan ürünleri getirirken bir hata oldu. Hata kodu = "+l.message,null,"setProducts if else")}catch(e){throw new i.default("Ürünleri getirirken bir hata oldu. Hata kodu = "+e.message,e.code,"setProducts try catch",e)}}));t.setProducts=d;t.SetProducts=(e,t)=>n(void 0,void 0,void 0,(function*(){try{const r=yield d(e);return t.json(r)}catch(e){throw new i.default(e.message,e.code,"SetProducts try catch",e)}}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),o=r(83),i=n.Router(),s=r(2);i.get("/cargo-information",s(o.GetSingleInformation)),i.get("/cargo-information-stratch",s(o.GetSingleInformationFromStratch)),t.default=i},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(84),t)},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.GetSingleInformationFromStratch=t.GetSingleInformation=void 0;const o=r(85),i=r(86),s=r(1);t.GetSingleInformation=(e,t,r)=>n(void 0,void 0,void 0,(function*(){const{query:{track:r,update:n}}=e,a=new i.default;if(yield a.prepareClient(),r){const e=yield a.getCargoInformation(r);if(e){if(n){yield o.singleCargoUpdate(r,e.DURUMU)}const i={success:!0,message:"Kargo başarıyla güncellendi. <hr/> Durumu : "+e.DURUMU,data:e};return t.json(i)}throw new s.default("Herhangi bir veri bulunamadı!",null,"ps.getCargoInformation false döndü.")}throw new s.default("Takip numarası boş kalamaz.",null,"GetSingleInformation if else.")}));t.GetSingleInformationFromStratch=(e,t,r)=>n(void 0,void 0,void 0,(function*(){const{query:{track:r,cargo:n}}=e,a=new i.default;if(yield a.prepareClient(),r&&n){const e=yield a.getCargoInformation(r);if(e){yield o.singleCargoUpdateFromStratch(n,r,e.DURUMU||"");const i={success:!0,message:"Kargo başarıyla güncellendi. <hr/> Durumu : "+e.DURUMU,data:e};return t.json(i)}throw new s.default("Herhangi bir veri bulunamadı!",null,"ps.getCargoInformation false döndü.")}throw new s.default("Takip numarası boş kalamaz.",null,"GetSingleInformation if else.")}))},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.singleCargoUpdateFromStratch=t.singleCargoUpdate=void 0;const o=r(3);t.singleCargoUpdate=(e,t)=>n(void 0,void 0,void 0,(function*(){const r=yield o.querier("UPDATE cargos SET status = $1  WHERE track = $2",[t,e]);if(1==r.success){return{success:!0,message:"Kargo başarıyla güncellendi."}}return{success:!1,message:"Bir hata oldu. Hata = "+r.message}})),t.singleCargoUpdateFromStratch=(e,t,r)=>n(void 0,void 0,void 0,(function*(){const n=yield o.querier('UPDATE cargos SET status = $1 , track = $2 WHERE "cargoId" = $3',[r,t,e]);if(1==n.success){return{success:!0,message:"Kargo başarıyla güncellendi."}}return{success:!1,message:"Bir hata oldu. Hata = "+n.message}}))},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=r(87);class i{constructor(e){this.url="http://customerservices.araskargo.com.tr/ArasCargoCustomerIntegrationService/ArasCargoIntegrationService.svc?wsdl",e&&(this.loginDefault=e),this.loginInfo=`<LoginInfo>\n        <UserName>${this.loginDefault.username}</UserName>\n        <Password>${this.loginDefault.password}</Password>\n        <CustomerCode>${this.loginDefault.customerCode}</CustomerCode>\n    </LoginInfo>`}prepareClient(){return n(this,void 0,void 0,(function*(){var e=yield o.createClientAsync(this.url);this.client=e}))}prepareXML(e,t){var r=`<QueryInfo>\n        <QueryType>${e}</QueryType>\n        `;t.map(e=>{r+=`<${e.k}>${e.v}</${e.k}>`}),r+="</QueryInfo>",this.queryInfo=r}sendRequest(e,t,r){return new Promise((n,o)=>{switch(this.prepareXML(t,r),e){case"json":this.client.GetQueryJSON({loginInfo:this.loginInfo,queryInfo:this.queryInfo},(e,t)=>{e?o(e.message):n(t)});break;case"xml":this.client.GetQueryXML({loginInfo:this.loginInfo,queryInfo:this.queryInfo},(e,t)=>{e?o(e):n(t)});break;case"ds":this.client.GetQueryDS({loginInfo:this.loginInfo,queryInfo:this.queryInfo},(e,t)=>{e?o(e):n(t)})}})}getCargoInformation(e){return n(this,void 0,void 0,(function*(){const t=yield this.sendRequest("json",1,[{k:"TrackingNumber",v:e}]);return this.dataHandler(t)}))}dataHandler(e){try{const r=JSON.parse(e.GetQueryJSONResult),{QueryResult:n}=r;if(Object.keys(n).includes("Cargo")&&"object"==typeof n.Cargo){var t={};return t=Array.isArray(n.Cargo)?n.Cargo[0]:n.Cargo,Object.keys(t).includes("IADE_SEBEBI")&&"TESLİM EDİLDİ - NORMAL"!=t.DURUMU&&(t.DURUMU=t.DURUMU+" / Iade Sebebi : "+t.IADE_SEBEBI),t}return!1}catch(e){return!1}}}i.prototype.loginDefault={username:"ademuysal",password:"Emre8195!",customerCode:"1729744311049"},t.default=i},function(e,t){e.exports=require("soap")},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),o=r(9),i=n.Router(),s=r(2);i.get("/token_redirect",s(o.token_redirect)),i.post("/create",s(o.create_invoice)),i.get("/get/:ettn/:type",s(o.getFile)),i.post("/get-multiple",s(o.getMultipleFile)),t.default=i},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.bodyHandler=t.responseHandler=t.createInvoice=t.create_invoice=void 0;const o=r(9),i=r(11),s=r(1),a=r(10),c=e=>{var t,r,n,o,i,s,c,u,d,l,f,v,p,y,h,_;return{recordType:e.recordType||0,status:20,note:e.note||null,notes:e.notes||null,xsltCode:e.xsltCode||null,localReferenceId:e.localReferenceId||null,addressBook:{identificationNumber:(null===(t=e.addressBook)||void 0===t?void 0:t.identificationNumber)||1111111111,name:a.strReplacer(null===(r=e.addressBook)||void 0===r?void 0:r.name),receiverPersonSurName:(null===(n=e.addressBook)||void 0===n?void 0:n.receiverPersonSurName)||"-",receiverTaxOffice:(null===(o=e.addressBook)||void 0===o?void 0:o.receiverTaxOffice)||null,receiverCountry:(null===(i=e.addressBook)||void 0===i?void 0:i.receiverCountry)||"Türkiye",receiverCity:(null===(s=e.addressBook)||void 0===s?void 0:s.receiverCity)||"İstanbul",receiverDistrict:null===(c=e.addressBook)||void 0===c?void 0:c.receiverDistrict,receiverPhoneNumber:(null===(u=e.addressBook)||void 0===u?void 0:u.receiverPhoneNumber)||null,receiverEmail:(null===(d=e.addressBook)||void 0===d?void 0:d.receiverEmail)||"gumusistan.efatura@gmail.com"},generalInfoModel:{type:(null===(l=e.generalInfoModel)||void 0===l?void 0:l.type)||3,invoiceProfileType:(null===(f=e.generalInfoModel)||void 0===f?void 0:f.invoiceProfileType)||1,prefix:null===(v=e.generalInfoModel)||void 0===v?void 0:v.prefix,issueDate:"123",currencyCode:"TRY",exchangeRate:0},archiveInfoModel:{shipmentDate:"123",isInternetSale:(null===(p=e.archiveInfoModel)||void 0===p?void 0:p.isInternetSale)||!0,hideDespatchMessage:!1,shipmentSenderName:(null===(y=e.archiveInfoModel)||void 0===y?void 0:y.shipmentSenderName)||"ARAS KARGO",shipmentSenderTcknVkn:(null===(h=e.archiveInfoModel)||void 0===h?void 0:h.shipmentSenderTcknVkn)||"0720039666",shipmentSendType:"ELEKTRONIK"},invoiceLines:e.invoiceLines,eArsivInfo:{sendEMail:!0},paymentMeansModel:{paymentMeansCode:(null===(_=e.paymentMeansModel)||void 0===_?void 0:_.paymentMeansCode)||10,paymentDueDate:"123"}}};t.bodyHandler=c;const u=(e,t,r)=>n(void 0,void 0,void 0,(function*(){var n,o,i;if(1==e.success)return e;try{if(null===(o=null===(n=e.error)||void 0===n?void 0:n.response)||void 0===o?void 0:o.data){const{data:n}=e.error.response;if("string"==typeof n)return{success:!1,message:`Bir hata oldu. Hata Kodu = ${e.error.message} <hr/> Hata Açıklaması = ${n}, Hata Detayı = ${n}`,error:e.error,original:e};if("object"==typeof n){if("e-Arşiv göndermek istediğiniz firma bir e-fatura kullanıcısıdır."==(null===(i=null==n?void 0:n["Uyarı"])||void 0===i?void 0:i[0])){delete t.generalInfoModel.prefix,delete t.archiveInfoModel,delete t.eArsivInfo,t.recordType=1;const e=yield d(t,r);return yield u(e,t,r)}return{success:!1,message:`Bir hata oldu. Hata Kodu = ${e.error.message} <hr/> Hata Açıklaması = ${JSON.stringify(n,null,3)}`,error:e.error,original:e}}}return{success:!1,message:"Bir hata oldu. Hata Kodu = "+e.error.message,error:e.error,original:e}}catch(t){return{success:!1,message:`İki hata oldu. İlk Hata = ${e.message} , İkinci Hata = ${t.message}`,error:t,original:e}}}));t.responseHandler=u;const d=(e,t)=>n(void 0,void 0,void 0,(function*(){try{const r=yield t.post("/v1/outboxinvoice/create",e);return yield u({success:!0,data:r.data,item:e},e,t)}catch(r){return r.stack&&delete r.stack,console.log(r.response),yield u({success:!1,message:r.message,error:r,original:r},e,t)}}));t.createInvoice=d;t.create_invoice=(e,t,r)=>n(void 0,void 0,void 0,(function*(){try{const s=a.magazaDestructor(e),u=o.token_checker(e,s);var r=o.turkcell_controller_api,n=c(e.body);"test"==s&&(r=i.turkcell_test_api,n=i.turkcell_test_body_handler(n)),r.defaults.headers.Authorization="Bearer "+u;const l=yield d(n,r);return t.json(l)}catch(e){throw new s.default(e.message,e.code,"create_invoice try catch",e)}}))},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.getMultipleFile=t.getFile=void 0;const o=r(9),i=r(1),s=r(91),a=(e,t,r)=>n(void 0,void 0,void 0,(function*(){try{const n=yield e.get(`/v2/outboxinvoice/${t}/${r}/`,{responseType:"arraybuffer"});return{success:!0,output:n.data}}catch(e){return{success:!1,message:e.message,error:e}}}));t.getFile=(e,t,r)=>n(void 0,void 0,void 0,(function*(){try{const r=o.turkcell_controller_api_handler(e),{ettn:n,type:i}=e.params,s=a(r,n,i);return t.json(s)}catch(e){throw new i.default(e.message,e.code,e.message,e)}}));t.getMultipleFile=(e,t,r)=>n(void 0,void 0,void 0,(function*(){try{const{body:{faturas:c}}=e,u=o.turkcell_controller_api_handler(e);for(var r=new s,n={success:!0,errors:[]},i=0;i<c.length;i++){const e=c[i];try{const t=yield a(u,e.ettn,"pdf");if(1!=t.success)throw new Error(t.message);r.addFile(`${e.id}_${e.ettn}.pdf`,t.output)}catch(t){n.errors.push({ettn:e.ettn,message:t.message})}}return n.output=yield r.toBuffer(),t.json(n)}catch(e){const r={success:!1,message:e.message,error:e};return t.json(r)}}))},function(e,t){e.exports=require("adm-zip")},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),o=r(27),i=n.Router(),s=r(2);i.get("/get/products",s(o.getProducts)),i.get("/get/products/minimalized",s(o.getProductsMinimalized)),t.default=i},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.getProductsMinimalized=t.getProducts=void 0;const o=r(27),i=r(28),s=r(21),a=r(1),c=(e,t="")=>n(void 0,void 0,void 0,(function*(){try{const r="/api/v1/Products?"+t;console.log(r);return{success:!0,data:(yield e.get(r)).data}}catch(e){return{success:!1,message:e.message}}}));t.getProducts=(e,t)=>n(void 0,void 0,void 0,(function*(){try{const{api:r}=o.ciceksepeti_controller_api_handler(e),{query:n}=e,u={PageSize:Number(n.PageSize)||60,Page:Number(n.Page)||0,ProductStatus:Number(n.ProductStatus)||i.Enum_CiceksepetiProductStatus.Yayında},d=yield c(r,s.objectToQuery(u));if(1==d.success){const e={success:!0,data:d.data};return t.json(e)}throw new a.default(`getProductsController false döndü. ${s.objectToQuery(u)}. HataKodu = ${d.message}`)}catch(e){throw new a.default(e.message,e.code,"Ciceksepeti Get.ts getProducts try catch",e)}}));t.getProductsMinimalized=(e,t)=>n(void 0,void 0,void 0,(function*(){try{const{api:r}=o.ciceksepeti_controller_api_handler(e),{query:n}=e,u={PageSize:Number(n.PageSize)||60,Page:Number(n.Page)||0,ProductStatus:Number(n.ProductStatus)||i.Enum_CiceksepetiProductStatus.Yayında},d=yield c(r,s.objectToQuery(u));if(1==d.success){const e=d.data.products.map(e=>({productName:e.productName,productCode:e.productCode,images:e.images})),r={success:!0,data:{totalCount:d.data.totalCount,products:e}};return t.json(r)}throw new a.default(`getProductsController false döndü. ${s.objectToQuery(u)}. HataKodu = ${d.message}`)}catch(e){throw new a.default(e.message,e.code,"Ciceksepeti Get.ts getProductsMinimalized try catch",e)}}))},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(95),t),o(r(111),t),o(r(116),t)},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(96),t),o(r(97),t),o(r(98),t),o(r(99),t),o(r(100),t),o(r(101),t),o(r(102),t),o(r(103),t),o(r(104),t),o(r(105),t),o(r(106),t),o(r(107),t),o(r(108),t),o(r(109),t),o(r(110),t)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(112),t),o(r(113),t),o(r(114),t),o(r(115),t)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(117),t),o(r(118),t),o(r(119),t),o(r(120),t),o(r(121),t),o(r(122),t)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(124),t),o(r(126),t),o(r(134),t)},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(125),t)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.abc=void 0,t.abc=5},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(127),t),o(r(131),t),o(r(132),t)},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(128),t),o(r(129),t),o(r(130),t)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(133),t)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(135),t),o(r(136),t)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(137),t)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.a=void 0,t.a=5},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(141),t)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(143),t),o(r(150),t)},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(144),t),o(r(145),t),o(r(146),t),o(r(147),t),o(r(148),t),o(r(149),t)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Anchors=t.BorderLineStyles=t.AlignHV=void 0,function(e){e.center="center",e.centerContinuous="centerContinuous",e.distributed="distributed",e.fill="fill",e.general="general",e.justify="justify",e.left="left",e.right="right"}(t.AlignHV||(t.AlignHV={})),function(e){e.none="none",e.thin="thin",e.medium="medium",e.dashed="dashed",e.dotted="dotted",e.thick="thick",e.double="double",e.hair="hair",e.mediumDashed="mediumDashed",e.dashDot="dashDot",e.mediumDashDot="mediumDashDot",e.dashDotDot="dashDotDot",e.mediumDashDotDot="mediumDashDotDot",e.slantDashDot="slantDashDot"}(t.BorderLineStyles||(t.BorderLineStyles={})),function(e){e.oneCellAnchor="oneCellAnchor",e.twoCellAnchor="twoCellAnchor",e.absoluteAnchor="absoluteAnchor"}(t.Anchors||(t.Anchors={}))},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(152),t),o(r(155),t),o(r(158),t),o(r(162),t)},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(153),t),o(r(154),t)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(156),t),o(r(157),t)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Turkcell_ShipmentSenders=void 0,function(e){e["ARAS KARGO"]="0720039666",e["YURTİÇİ KARGO"]="9860008925",e["TIME TAŞIMACILIK"]="2090686104"}(t.Turkcell_ShipmentSenders||(t.Turkcell_ShipmentSenders={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(159),t),o(r(160),t),o(r(161),t)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Enum_CiceksepetiProductStatus=void 0,function(e){e[e.Taslak=1]="Taslak",e[e["Onay Bekliyor"]=2]="Onay Bekliyor",e[e["Yayında"]=3]="Yayında",e[e["Stoğu Bitenler"]=8]="Stoğu Bitenler"}(t.Enum_CiceksepetiProductStatus||(t.Enum_CiceksepetiProductStatus={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(163),t),o(r(164),t)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(166),t)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(0),o=r(15),i=n.Router(),s=r(2);i.post("/single",s(o.singleExtract)),i.post("/multiple",s(o.multipleExtract)),t.default=i},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=r(28),i=r(169);r(29);class s extends i.default{constructor(){super(),this.calculator={}}setPreStyles(e){var t={font:{bold:!0},alignment:{horizontal:o.AlignHV.center,vertical:o.AlignHV.center,wrapText:!0},border:{top:{color:"#000000",style:o.BorderLineStyles.thick},right:{color:"#000000",style:o.BorderLineStyles.thin},left:{color:"#000000",style:o.BorderLineStyles.thin},bottom:{color:"#000000",style:o.BorderLineStyles.thin},outline:!1}},r=Object.assign(Object.assign({},t),{font:{color:"#FF0000"}}),n=Object.assign(Object.assign({},t),{font:{color:"#000000"}});const{ws:i}=this;let s=1;e%2==1&&++e,s+=e/2*9;for(var a=[1,2,4,5,6,8],c=[3,7],u=2;u<s;u+=9)c.forEach(e=>{i.cell(u,e,u+8,e,!0).style(r)}),a.forEach(e=>{i.cell(u,e,u+8,e,!0).style(n)});return i.setPrintArea(1,1,s,8),i.cell(1,1,1,8).style(t),this.ws=i,s}setPost(e){const{ws:t}=this;Object.keys(this.calculator).forEach(r=>{t.cell(e++,2).string(`${r} : ${this.calculator[r]}`)}),this.ws=t}setItem(e,t,r){const i=Object.create(null,{getImageAsync:{get:()=>super.getImageAsync},addImage:{get:()=>super.addImage}});return n(this,void 0,void 0,(function*(){const{ws:n}=this;n.cell(r,t[0]).string(e.name).style({alignment:{textRotation:-90}});let s=yield i.getImageAsync.call(this,e.image);if(!1!==s){let e={type:"picture",image:s,position:{type:o.Anchors.twoCellAnchor,from:{col:t[1],rowOff:.2,row:r},to:{col:t[2],rowOff:.2,row:r+9}}};i.addImage.call(this,e)}else this.result.errors.push({item:e,message:"Resimle ilgili bir hata oluştu"}),console.log(`Row: ${r}, colPosition: ${t[1]}`),n.cell(r,t[1]).string("Verilen linkte bir resim bulamadık. Link : "+e.image);n.cell(r,t[2]).string(e.specs||"-"),n.cell(r,t[3]).string(""+e.color);let a=this.calculator;a[e.name]?a[e.name]+=1:a[e.name]=1,this.calculator=a,this.ws=n}))}atolyeExtract(e){const t=Object.create(null,{setHeader:{get:()=>super.setHeader}});return n(this,void 0,void 0,(function*(){var r;t.setHeader.call(this),r=e||this.items;let n=this.setPreStyles(r.length),o="left",i=[1,2,3,4],s=[5,6,7,8];for(var a=2,c=0;a<=n&&c<r.length;c++){let e,t=a;"left"===o?(e=i,o="right"):(a+=9,e=s,o="left"),yield this.setItem(r[c],e,t)}this.setPost(n+2)}))}addWorksheet(e="Sheet 1"){super.addWorksheet(e,this.styles.worksheet),super.setCols(this.cols)}debug(){console.log(this.calculator)}}t.default=s;var a={worksheet:{margins:{top:.2755,bottom:0,left:.2362,right:.2362,header:.3149,footer:.3149}},header:{font:{bold:!0,name:"Times New Roman",size:13},alignment:{vertical:o.AlignHV.center,horizontal:o.AlignHV.center,wrapText:!0}},row:{rowStyles:{rowHeight:30.6}}};s.prototype.styles=a,s.prototype.cols=[{col:"A",width:3.44},{col:"B",width:23.11},{col:"C",width:16.44},{col:"D",width:10.78},{col:"E",width:3.44},{col:"F",width:23.11},{col:"G",width:16.44},{col:"H",width:10.78}];const c=new Date;const u=String(c.getDate()).padStart(2,"0")+"/"+String(c.getMonth()+1).padStart(2,"0")+"/"+c.getFullYear();s.prototype.header=["No",u,"Kişiselleştirme","Ürün Rengi","No",u,"Kişiselleştirme","Ürün Rengi"],s.prototype.result={success:!0,errors:[]},s.prototype.items=[{name:"INST",specs:"Üzerine alpha yazılsın",color:"Kırmızı",image:"https://wallup.net/wp-content/uploads/2018/09/25/615408-dark-owl-748x468.jpg"},{name:"WP",image:"https://pbs.twimg.com/profile_images/1067211305495347200/ltUFYyFp_400x400.jpg",color:"Yeşil"},{name:"SORTI",specs:"Üzerine omega yazılsın",color:"Yeşil",image:"htts/2018/09/25/615408-dark-owl-748x468.jpg"},{name:"WP",image:"https://hawkandowltrust.org/images/Images/Barn%20Owl2.jpg",color:"Sarı",specs:"Üzerine teta yazılsın"}]},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=r(6),i=r(29);class s{constructor(){const e=new i.Workbook;this.wb=e}get workbook(){return this.wb}get worksheet(){return this.ws}addWorksheet(e,t){var r;return r=t?this.wb.addWorksheet(e,t):this.wb.addWorksheet(e,this.styles.worksheet),this.ws=r,r}setCols(e){const{ws:t}=this;e.map(e=>{let r=i.getExcelRowCol(e.col);t.column(r.col).setWidth(e.width)}),this.ws=t}setHeader(e){e&&(this.header=e);const{ws:t}=this;this.header.forEach((e,r)=>{t.cell(1,r+1).string(e).style(this.styles.header)}),this.ws=t}jsonToSheet(e){this.setHeader(Object.keys(e[0]));for(var{ws:t}=this,r=0;r<e.length;r++){const n=e[r];Object.values(n).forEach((e,n)=>{t.cell(r+2,n+1).string(e.toString()||"").style(this.styles.row)})}}arrayToSheet(e){for(var{ws:t}=this,r=0;r<e.length;r++){const n=e[r];Object.values(n).forEach((e,n)=>{t.cell(r+2,n+1).string(e.toString||"").style(this.styles.row)})}}mergeCells(e){const{ws:t}=this,r=e.split(":"),n=i.getExcelRowCol(r[0]),o=i.getExcelRowCol(r[1]);t.cell(n.row,n.col,o.row,o.col),this.ws=t}addImage(e){const{ws:t}=this;t.addImage(e),this.ws=t}validateImage(e,t={isUrl:!0}){let r="";return t.isUrl?e.startsWith("http://")||e.startsWith("https://")?e:!!e.startsWith("//")&&(r=`https:${e};`,r):e}getImageAsync(e){return n(this,void 0,void 0,(function*(){const t=this.validateImage(e);if(!1===t)return!1;try{const e=yield o.default.get(t,{responseType:"arraybuffer"});if(200===e.status)return e.data}catch(e){return console.log("Error : "+e.message),!1}}))}save(e){return n(this,void 0,void 0,(function*(){yield this.wb.write(e)}))}test(){this.wb.write("./extracts/deneme.xlsx")}debug(){}}s.prototype.styles={worksheet:{margins:{top:.2755,bottom:0,left:.2362,header:.3149,footer:.3149}}},t.default=s},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.singleExtract=void 0;const o=r(15),i=r(1);t.singleExtract=(e,t)=>n(void 0,void 0,void 0,(function*(){try{const{data:r}=e.body,n=yield o.atolye_controller_extract(r);return t.json(n)}catch(e){throw new i.default(e.message,e.code,e.message,e)}}))},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.multipleExtract=void 0;const o=r(1),i=r(15);t.multipleExtract=(e,t)=>n(void 0,void 0,void 0,(function*(){try{const{datas:o}=e.body,s=Object.keys(o);for(var r={success:!0,outputs:{pink:null,green:null,yellow:null}},n=0;n<s.length;n++){const e=s[n],t=o[e];if(0!==t.length){const n=yield i.atolye_controller_extract(t);1==n.success&&(r.outputs[e]=n.output)}}return t.json(r)}catch(e){throw new o.default(e.message,e.code,e.message,e)}}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,